
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 23 00:28:22 CST 2019
//----------------------------------------------------

package Parser.HTML;

import Backend.Objects.ErrorI;
import Frontend.MainFrame;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 23 00:28:22 CST 2019
  */
public class parserHTML extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserHTML() {super();}

  /** Constructor which sets the default scanner. */
  public parserHTML(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserHTML(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\171\000\002\002\004\000\002\002\006\000\002\004" +
    "\003\000\002\004\002\000\002\005\003\000\002\005\002" +
    "\000\002\003\004\000\002\003\005\000\002\006\003\000" +
    "\002\006\002\000\002\007\003\000\002\007\002\000\002" +
    "\016\005\000\002\020\003\000\002\020\002\000\002\021" +
    "\003\000\002\021\002\000\002\010\002\000\002\010\005" +
    "\000\002\035\005\000\002\035\004\000\002\036\004\000" +
    "\002\036\003\000\002\012\012\000\002\012\012\000\002" +
    "\012\012\000\002\012\011\000\002\012\011\000\002\012" +
    "\011\000\002\017\003\000\002\017\002\000\002\013\004" +
    "\000\002\032\003\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\003\000\002\032\003\000\002\032\005\000\002\032\005" +
    "\000\002\037\004\000\002\043\003\000\002\043\003\000" +
    "\002\033\005\000\002\033\007\000\002\033\013\000\002" +
    "\033\014\000\002\033\007\000\002\033\007\000\002\033" +
    "\005\000\002\033\007\000\002\042\004\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\004\000" +
    "\002\031\005\000\002\031\002\000\002\027\012\000\002" +
    "\027\012\000\002\027\012\000\002\027\002\000\002\030" +
    "\003\000\002\030\003\000\002\026\012\000\002\026\012" +
    "\000\002\026\012\000\002\026\002\000\002\024\012\000" +
    "\002\024\002\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\023\012\000\002\023\012\000\002\023" +
    "\012\000\002\023\012\000\002\023\002\000\002\014\011" +
    "\000\002\014\002\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\004\000\002\022\004" +
    "\000\002\022\004\000\002\022\004\000\002\022\004\000" +
    "\002\022\004\000\002\022\004\000\002\022\004\000\002" +
    "\022\004\000\002\022\004\000\002\034\004\000\002\034" +
    "\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0115\000\024\002\ufffe\004\006\005\ufffe\006\ufffe\007" +
    "\ufffe\010\ufffe\121\ufffe\122\ufffe\137\ufffe\001\002\000\004" +
    "\002\u0117\001\002\000\022\002\ufff8\005\ufff8\006\011\007" +
    "\ufff8\010\ufff8\121\ufff8\122\ufff8\137\ufff8\001\002\000\022" +
    "\002\uffff\005\uffff\006\uffff\007\uffff\010\uffff\121\uffff\122" +
    "\uffff\137\uffff\001\002\000\010\002\ufff0\005\ufff0\010\027" +
    "\001\002\000\020\002\ufff6\005\ufff6\007\012\010\ufff6\121" +
    "\ufff3\122\ufff3\137\015\001\002\000\020\002\ufff9\005\ufff9" +
    "\007\ufff9\010\ufff9\121\ufff9\122\ufff9\137\ufff9\001\002\000" +
    "\010\002\ufff7\005\ufff7\010\ufff7\001\002\000\006\121\020" +
    "\122\022\001\002\000\012\002\ufff6\005\ufff6\007\012\010" +
    "\ufff6\001\002\000\006\121\ufff4\122\ufff4\001\002\000\010" +
    "\002\ufffb\005\ufffb\010\ufffb\001\002\000\010\002\ufffa\005" +
    "\ufffa\010\ufffa\001\002\000\076\002\uff8a\005\uff8a\007\uff8a" +
    "\010\uff8a\031\uff8a\032\uff8a\065\uff8a\067\uff8a\071\uff8a\073" +
    "\uff8a\075\uff8a\077\uff8a\101\uff8a\103\uff8a\105\uff8a\110\uff8a" +
    "\112\uff8a\116\uff8a\121\uff8a\123\uff8a\124\uff8a\125\uff8a\126" +
    "\uff8a\127\uff8a\130\uff8a\131\uff8a\132\uff8a\133\uff8a\134\uff8a" +
    "\140\uff8a\001\002\000\016\002\ufff1\005\ufff1\007\ufff1\010" +
    "\ufff1\121\023\140\025\001\002\000\076\002\uff89\005\uff89" +
    "\007\uff89\010\uff89\031\uff89\032\uff89\065\uff89\067\uff89\071" +
    "\uff89\073\uff89\075\uff89\077\uff89\101\uff89\103\uff89\105\uff89" +
    "\110\uff89\112\uff89\116\uff89\121\uff89\123\uff89\124\uff89\125" +
    "\uff89\126\uff89\127\uff89\130\uff89\131\uff89\132\uff89\133\uff89" +
    "\134\uff89\140\uff89\001\002\000\076\002\uff8b\005\uff8b\007" +
    "\uff8b\010\uff8b\031\uff8b\032\uff8b\065\uff8b\067\uff8b\071\uff8b" +
    "\073\uff8b\075\uff8b\077\uff8b\101\uff8b\103\uff8b\105\uff8b\110" +
    "\uff8b\112\uff8b\116\uff8b\121\uff8b\123\uff8b\124\uff8b\125\uff8b" +
    "\126\uff8b\127\uff8b\130\uff8b\131\uff8b\132\uff8b\133\uff8b\134" +
    "\uff8b\140\uff8b\001\002\000\012\002\ufff5\005\ufff5\007\ufff5" +
    "\010\ufff5\001\002\000\012\002\ufff2\005\ufff2\007\ufff2\010" +
    "\ufff2\001\002\000\006\002\ufffc\005\u0115\001\002\000\004" +
    "\013\030\001\002\000\006\011\033\141\034\001\002\000" +
    "\006\002\uffef\005\uffef\001\002\000\006\011\u0100\141\u0101" +
    "\001\002\000\042\002\uffe3\005\uffe3\010\uffe3\066\uffe3\070" +
    "\uffe3\072\uffe3\074\uffe3\076\uffe3\100\uffe3\102\uffe3\104\uffe3" +
    "\106\uffe3\107\uffe3\111\uffe3\145\uffe3\150\uffe3\001\002\000" +
    "\010\022\036\025\037\142\035\001\002\000\004\033\073" +
    "\001\002\000\004\033\066\001\002\000\004\033\040\001" +
    "\002\000\004\116\041\001\002\000\044\035\046\036\047" +
    "\037\045\040\051\041\050\042\053\043\062\044\044\045" +
    "\052\046\056\047\042\050\061\051\063\052\054\053\057" +
    "\054\043\120\060\001\002\000\004\116\uff9e\001\002\000" +
    "\004\116\uff99\001\002\000\004\116\uffa1\001\002\000\004" +
    "\116\uffa6\001\002\000\004\116\uffa8\001\002\000\004\116" +
    "\uffa7\001\002\000\004\116\uffa4\001\002\000\004\116\uffa5" +
    "\001\002\000\004\116\uffa0\001\002\000\004\116\uffa3\001" +
    "\002\000\004\116\uff9b\001\002\000\004\116\064\001\002" +
    "\000\004\116\uff9f\001\002\000\004\116\uff9a\001\002\000" +
    "\004\116\uff98\001\002\000\004\116\uff9d\001\002\000\004" +
    "\116\uffa2\001\002\000\004\116\uff9c\001\002\000\004\034" +
    "\065\001\002\000\006\011\uffe7\141\uffe7\001\002\000\004" +
    "\116\067\001\002\000\044\035\046\036\047\037\045\040" +
    "\051\041\050\042\053\043\062\044\044\045\052\046\056" +
    "\047\042\050\061\051\063\052\054\053\057\054\043\120" +
    "\060\001\002\000\004\116\071\001\002\000\004\034\072" +
    "\001\002\000\006\011\uffe6\141\uffe6\001\002\000\004\116" +
    "\074\001\002\000\044\035\046\036\047\037\045\040\051" +
    "\041\050\042\053\043\062\044\044\045\052\046\056\047" +
    "\042\050\061\051\063\052\054\053\057\054\043\120\060" +
    "\001\002\000\004\116\076\001\002\000\004\034\077\001" +
    "\002\000\006\011\uffe5\141\uffe5\001\002\000\120\002\uffe4" +
    "\005\uffe4\010\uffe4\031\uffe4\032\uffe4\065\uffe4\066\uffe4\067" +
    "\uffe4\070\uffe4\071\uffe4\072\uffe4\073\uffe4\074\uffe4\075\uffe4" +
    "\076\uffe4\077\uffe4\100\uffe4\101\uffe4\102\uffe4\103\uffe4\104" +
    "\uffe4\105\uffe4\106\uffe4\107\uffe4\110\uffe4\111\uffe4\112\uffe4" +
    "\123\uffe4\124\uffe4\125\uffe4\126\uffe4\127\uffe4\130\uffe4\131" +
    "\uffe4\132\uffe4\133\uffe4\134\uffe4\145\uffe4\150\uffe4\001\002" +
    "\000\006\002\uffed\005\uffed\001\002\000\042\002\uffeb\005" +
    "\uffeb\010\120\066\116\070\117\072\121\074\104\076\111" +
    "\100\110\102\122\104\112\106\114\107\113\111\105\145" +
    "\115\150\107\001\002\000\120\002\uffe1\005\uffe1\010\uffe1" +
    "\031\uffe1\032\uffe1\065\uffe1\066\uffe1\067\uffe1\070\uffe1\071" +
    "\uffe1\072\uffe1\073\uffe1\074\uffe1\075\uffe1\076\uffe1\077\uffe1" +
    "\100\uffe1\101\uffe1\102\uffe1\103\uffe1\104\uffe1\105\uffe1\106" +
    "\uffe1\107\uffe1\110\uffe1\111\uffe1\112\uffe1\123\uffe1\124\uffe1" +
    "\125\uffe1\126\uffe1\127\uffe1\130\uffe1\131\uffe1\132\uffe1\133" +
    "\uffe1\134\uffe1\145\uffe1\150\uffe1\001\002\000\066\010\uffe3" +
    "\066\uffe3\070\uffe3\072\uffe3\074\uffe3\075\uffe3\076\uffe3\100" +
    "\uffe3\102\uffe3\104\uffe3\106\uffe3\107\uffe3\111\uffe3\121\020" +
    "\122\022\123\uffe3\124\uffe3\125\uffe3\126\uffe3\127\uffe3\130" +
    "\uffe3\131\uffe3\132\uffe3\133\uffe3\134\uffe3\150\uffe3\001\002" +
    "\000\066\010\uffe3\066\uffe3\070\uffe3\072\uffe3\074\uffe3\076" +
    "\uffe3\100\uffe3\102\uffe3\104\uffe3\106\uffe3\107\uffe3\111\uffe3" +
    "\112\uffe3\121\020\122\022\123\uffe3\124\uffe3\125\uffe3\126" +
    "\uffe3\127\uffe3\130\uffe3\131\uffe3\132\uffe3\133\uffe3\134\uffe3" +
    "\150\uffe3\001\002\000\120\002\uffe2\005\uffe2\010\uffe2\031" +
    "\uffe2\032\uffe2\065\uffe2\066\uffe2\067\uffe2\070\uffe2\071\uffe2" +
    "\072\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2\077\uffe2\100" +
    "\uffe2\101\uffe2\102\uffe2\103\uffe2\104\uffe2\105\uffe2\106\uffe2" +
    "\107\uffe2\110\uffe2\111\uffe2\112\uffe2\123\uffe2\124\uffe2\125" +
    "\uffe2\126\uffe2\127\uffe2\130\uffe2\131\uffe2\132\uffe2\133\uffe2" +
    "\134\uffe2\145\uffe2\150\uffe2\001\002\000\120\002\uffd7\005" +
    "\uffd7\010\uffd7\031\uffd7\032\uffd7\065\uffd7\066\uffd7\067\uffd7" +
    "\070\uffd7\071\uffd7\072\uffd7\073\uffd7\074\uffd7\075\uffd7\076" +
    "\uffd7\077\uffd7\100\uffd7\101\uffd7\102\uffd7\103\uffd7\104\uffd7" +
    "\105\uffd7\106\uffd7\107\uffd7\110\uffd7\111\uffd7\112\uffd7\123" +
    "\uffd7\124\uffd7\125\uffd7\126\uffd7\127\uffd7\130\uffd7\131\uffd7" +
    "\132\uffd7\133\uffd7\134\uffd7\145\uffd7\150\uffd7\001\002\000" +
    "\066\010\uffe3\066\uffe3\070\uffe3\072\uffe3\074\uffe3\076\uffe3" +
    "\100\uffe3\101\uffe3\102\uffe3\104\uffe3\106\uffe3\107\uffe3\111" +
    "\uffe3\121\020\122\022\123\uffe3\124\uffe3\125\uffe3\126\uffe3" +
    "\127\uffe3\130\uffe3\131\uffe3\132\uffe3\133\uffe3\134\uffe3\150" +
    "\uffe3\001\002\000\066\010\uffe3\066\uffe3\070\uffe3\072\uffe3" +
    "\074\uffe3\076\uffe3\077\uffe3\100\uffe3\102\uffe3\104\uffe3\106" +
    "\uffe3\107\uffe3\111\uffe3\121\020\122\022\123\uffe3\124\uffe3" +
    "\125\uffe3\126\uffe3\127\uffe3\130\uffe3\131\uffe3\132\uffe3\133" +
    "\uffe3\134\uffe3\150\uffe3\001\002\000\066\010\uffe3\066\uffe3" +
    "\070\uffe3\072\uffe3\074\uffe3\076\uffe3\100\uffe3\102\uffe3\104" +
    "\uffe3\105\uffe3\106\uffe3\107\uffe3\111\uffe3\121\020\122\022" +
    "\123\uffe3\124\uffe3\125\uffe3\126\uffe3\127\uffe3\130\uffe3\131" +
    "\uffe3\132\uffe3\133\uffe3\134\uffe3\150\uffe3\001\002\000\066" +
    "\010\uffe3\066\uffe3\070\uffe3\072\uffe3\074\uffe3\076\uffe3\100" +
    "\uffe3\102\uffe3\104\uffe3\106\uffe3\107\uffe3\110\uffe3\111\uffe3" +
    "\121\020\122\022\123\uffe3\124\uffe3\125\uffe3\126\uffe3\127" +
    "\uffe3\130\uffe3\131\uffe3\132\uffe3\133\uffe3\134\uffe3\150\uffe3" +
    "\001\002\000\120\002\uffd8\005\uffd8\010\uffd8\031\uffd8\032" +
    "\uffd8\065\uffd8\066\uffd8\067\uffd8\070\uffd8\071\uffd8\072\uffd8" +
    "\073\uffd8\074\uffd8\075\uffd8\076\uffd8\077\uffd8\100\uffd8\101" +
    "\uffd8\102\uffd8\103\uffd8\104\uffd8\105\uffd8\106\uffd8\107\uffd8" +
    "\110\uffd8\111\uffd8\112\uffd8\123\uffd8\124\uffd8\125\uffd8\126" +
    "\uffd8\127\uffd8\130\uffd8\131\uffd8\132\uffd8\133\uffd8\134\uffd8" +
    "\145\uffd8\150\uffd8\001\002\000\006\002\uffec\005\uffec\001" +
    "\002\000\066\010\uffe3\066\uffe3\067\uffe3\070\uffe3\072\uffe3" +
    "\074\uffe3\076\uffe3\100\uffe3\102\uffe3\104\uffe3\106\uffe3\107" +
    "\uffe3\111\uffe3\121\020\122\022\123\uffe3\124\uffe3\125\uffe3" +
    "\126\uffe3\127\uffe3\130\uffe3\131\uffe3\132\uffe3\133\uffe3\134" +
    "\uffe3\150\uffe3\001\002\000\066\010\uffe3\066\uffe3\070\uffe3" +
    "\071\uffe3\072\uffe3\074\uffe3\076\uffe3\100\uffe3\102\uffe3\104" +
    "\uffe3\106\uffe3\107\uffe3\111\uffe3\121\020\122\022\123\uffe3" +
    "\124\uffe3\125\uffe3\126\uffe3\127\uffe3\130\uffe3\131\uffe3\132" +
    "\uffe3\133\uffe3\134\uffe3\150\uffe3\001\002\000\020\012\151" +
    "\016\144\017\146\021\154\026\143\027\150\064\145\001" +
    "\002\000\066\010\uffe3\066\uffe3\070\uffe3\072\uffe3\073\uffe3" +
    "\074\uffe3\076\uffe3\100\uffe3\102\uffe3\104\uffe3\106\uffe3\107" +
    "\uffe3\111\uffe3\121\020\122\022\123\uffe3\124\uffe3\125\uffe3" +
    "\126\uffe3\127\uffe3\130\uffe3\131\uffe3\132\uffe3\133\uffe3\134" +
    "\uffe3\150\uffe3\001\002\000\066\010\uffe3\066\uffe3\070\uffe3" +
    "\072\uffe3\074\uffe3\076\uffe3\100\uffe3\102\uffe3\103\uffe3\104" +
    "\uffe3\106\uffe3\107\uffe3\111\uffe3\121\020\122\022\123\uffe3" +
    "\124\uffe3\125\uffe3\126\uffe3\127\uffe3\130\uffe3\131\uffe3\132" +
    "\uffe3\133\uffe3\134\uffe3\150\uffe3\001\002\000\112\010\120" +
    "\031\uff97\032\uff97\065\uff97\066\116\067\uff97\070\117\071" +
    "\uff97\072\121\073\uff97\074\104\075\uff97\076\111\077\uff97" +
    "\100\110\101\uff97\102\122\103\uff97\104\112\105\uff97\106" +
    "\114\107\113\110\uff97\111\105\112\uff97\123\uff97\124\uff97" +
    "\125\uff97\126\uff97\127\uff97\130\uff97\131\uff97\132\uff97\133" +
    "\uff97\134\uff97\150\107\001\002\000\030\103\127\123\137" +
    "\124\134\125\136\126\140\127\126\130\133\131\131\132" +
    "\130\133\135\134\132\001\002\000\062\031\uff96\032\uff96" +
    "\065\uff96\067\uff96\071\uff96\073\uff96\075\uff96\077\uff96\101" +
    "\uff96\103\uff96\105\uff96\110\uff96\112\uff96\121\023\123\uff96" +
    "\124\uff96\125\uff96\126\uff96\127\uff96\130\uff96\131\uff96\132" +
    "\uff96\133\uff96\134\uff96\001\002\000\060\031\uff94\032\uff94" +
    "\065\uff94\067\uff94\071\uff94\073\uff94\075\uff94\077\uff94\101" +
    "\uff94\103\uff94\105\uff94\110\uff94\112\uff94\123\uff94\124\uff94" +
    "\125\uff94\126\uff94\127\uff94\130\uff94\131\uff94\132\uff94\133" +
    "\uff94\134\uff94\001\002\000\120\002\uffda\005\uffda\010\uffda" +
    "\031\uffda\032\uffda\065\uffda\066\uffda\067\uffda\070\uffda\071" +
    "\uffda\072\uffda\073\uffda\074\uffda\075\uffda\076\uffda\077\uffda" +
    "\100\uffda\101\uffda\102\uffda\103\uffda\104\uffda\105\uffda\106" +
    "\uffda\107\uffda\110\uffda\111\uffda\112\uffda\123\uffda\124\uffda" +
    "\125\uffda\126\uffda\127\uffda\130\uffda\131\uffda\132\uffda\133" +
    "\uffda\134\uffda\145\uffda\150\uffda\001\002\000\060\031\uff91" +
    "\032\uff91\065\uff91\067\uff91\071\uff91\073\uff91\075\uff91\077" +
    "\uff91\101\uff91\103\uff91\105\uff91\110\uff91\112\uff91\123\uff91" +
    "\124\uff91\125\uff91\126\uff91\127\uff91\130\uff91\131\uff91\132" +
    "\uff91\133\uff91\134\uff91\001\002\000\060\031\uff92\032\uff92" +
    "\065\uff92\067\uff92\071\uff92\073\uff92\075\uff92\077\uff92\101" +
    "\uff92\103\uff92\105\uff92\110\uff92\112\uff92\123\uff92\124\uff92" +
    "\125\uff92\126\uff92\127\uff92\130\uff92\131\uff92\132\uff92\133" +
    "\uff92\134\uff92\001\002\000\060\031\uff8f\032\uff8f\065\uff8f" +
    "\067\uff8f\071\uff8f\073\uff8f\075\uff8f\077\uff8f\101\uff8f\103" +
    "\uff8f\105\uff8f\110\uff8f\112\uff8f\123\uff8f\124\uff8f\125\uff8f" +
    "\126\uff8f\127\uff8f\130\uff8f\131\uff8f\132\uff8f\133\uff8f\134" +
    "\uff8f\001\002\000\060\031\uff93\032\uff93\065\uff93\067\uff93" +
    "\071\uff93\073\uff93\075\uff93\077\uff93\101\uff93\103\uff93\105" +
    "\uff93\110\uff93\112\uff93\123\uff93\124\uff93\125\uff93\126\uff93" +
    "\127\uff93\130\uff93\131\uff93\132\uff93\133\uff93\134\uff93\001" +
    "\002\000\060\031\uff8d\032\uff8d\065\uff8d\067\uff8d\071\uff8d" +
    "\073\uff8d\075\uff8d\077\uff8d\101\uff8d\103\uff8d\105\uff8d\110" +
    "\uff8d\112\uff8d\123\uff8d\124\uff8d\125\uff8d\126\uff8d\127\uff8d" +
    "\130\uff8d\131\uff8d\132\uff8d\133\uff8d\134\uff8d\001\002\000" +
    "\060\031\uff90\032\uff90\065\uff90\067\uff90\071\uff90\073\uff90" +
    "\075\uff90\077\uff90\101\uff90\103\uff90\105\uff90\110\uff90\112" +
    "\uff90\123\uff90\124\uff90\125\uff90\126\uff90\127\uff90\130\uff90" +
    "\131\uff90\132\uff90\133\uff90\134\uff90\001\002\000\060\031" +
    "\uff8c\032\uff8c\065\uff8c\067\uff8c\071\uff8c\073\uff8c\075\uff8c" +
    "\077\uff8c\101\uff8c\103\uff8c\105\uff8c\110\uff8c\112\uff8c\123" +
    "\uff8c\124\uff8c\125\uff8c\126\uff8c\127\uff8c\130\uff8c\131\uff8c" +
    "\132\uff8c\133\uff8c\134\uff8c\001\002\000\060\031\uff8e\032" +
    "\uff8e\065\uff8e\067\uff8e\071\uff8e\073\uff8e\075\uff8e\077\uff8e" +
    "\101\uff8e\103\uff8e\105\uff8e\110\uff8e\112\uff8e\123\uff8e\124" +
    "\uff8e\125\uff8e\126\uff8e\127\uff8e\130\uff8e\131\uff8e\132\uff8e" +
    "\133\uff8e\134\uff8e\001\002\000\060\031\uff95\032\uff95\065" +
    "\uff95\067\uff95\071\uff95\073\uff95\075\uff95\077\uff95\101\uff95" +
    "\103\uff95\105\uff95\110\uff95\112\uff95\123\uff95\124\uff95\125" +
    "\uff95\126\uff95\127\uff95\130\uff95\131\uff95\132\uff95\133\uff95" +
    "\134\uff95\001\002\000\030\073\142\123\137\124\134\125" +
    "\136\126\140\127\126\130\133\131\131\132\130\133\135" +
    "\134\132\001\002\000\120\002\uffdb\005\uffdb\010\uffdb\031" +
    "\uffdb\032\uffdb\065\uffdb\066\uffdb\067\uffdb\070\uffdb\071\uffdb" +
    "\072\uffdb\073\uffdb\074\uffdb\075\uffdb\076\uffdb\077\uffdb\100" +
    "\uffdb\101\uffdb\102\uffdb\103\uffdb\104\uffdb\105\uffdb\106\uffdb" +
    "\107\uffdb\110\uffdb\111\uffdb\112\uffdb\123\uffdb\124\uffdb\125" +
    "\uffdb\126\uffdb\127\uffdb\130\uffdb\131\uffdb\132\uffdb\133\uffdb" +
    "\134\uffdb\145\uffdb\150\uffdb\001\002\000\006\011\uffaf\141" +
    "\uffaf\001\002\000\006\011\uffb7\141\uffb7\001\002\000\006" +
    "\030\264\113\265\001\002\000\006\011\uffb9\141\uffb9\001" +
    "\002\000\120\002\uffd3\005\uffd3\010\uffd3\031\uffd3\032\uffd3" +
    "\065\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3\073" +
    "\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\100\uffd3\101\uffd3" +
    "\102\uffd3\103\uffd3\104\uffd3\105\uffd3\106\uffd3\107\uffd3\110" +
    "\uffd3\111\uffd3\112\uffd3\123\uffd3\124\uffd3\125\uffd3\126\uffd3" +
    "\127\uffd3\130\uffd3\131\uffd3\132\uffd3\133\uffd3\134\uffd3\145" +
    "\uffd3\150\uffd3\001\002\000\006\011\uffbf\141\uffbf\001\002" +
    "\000\014\013\177\016\176\017\175\021\201\026\200\001" +
    "\002\000\120\002\uffd4\005\uffd4\010\uffd4\031\uffd4\032\uffd4" +
    "\065\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4\073" +
    "\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4\100\uffd4\101\uffd4" +
    "\102\uffd4\103\uffd4\104\uffd4\105\uffd4\106\uffd4\107\uffd4\110" +
    "\uffd4\111\uffd4\112\uffd4\123\uffd4\124\uffd4\125\uffd4\126\uffd4" +
    "\127\uffd4\130\uffd4\131\uffd4\132\uffd4\133\uffd4\134\uffd4\145" +
    "\uffd4\150\uffd4\001\002\000\120\002\uffd2\005\uffd2\010\uffd2" +
    "\031\uffd2\032\uffd2\065\uffd2\066\uffd2\067\uffd2\070\uffd2\071" +
    "\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2\076\uffd2\077\uffd2" +
    "\100\uffd2\101\uffd2\102\uffd2\103\uffd2\104\uffd2\105\uffd2\106" +
    "\uffd2\107\uffd2\110\uffd2\111\uffd2\112\uffd2\123\uffd2\124\uffd2" +
    "\125\uffd2\126\uffd2\127\uffd2\130\uffd2\131\uffd2\132\uffd2\133" +
    "\uffd2\134\uffd2\145\uffd2\150\uffd2\001\002\000\006\011\uffad" +
    "\141\156\001\002\000\004\011\171\001\002\000\004\023" +
    "\157\001\002\000\004\033\160\001\002\000\004\116\161" +
    "\001\002\000\012\055\163\056\164\057\165\060\166\001" +
    "\002\000\004\116\167\001\002\000\004\116\uffac\001\002" +
    "\000\004\116\uffab\001\002\000\004\116\uffaa\001\002\000" +
    "\004\116\uffa9\001\002\000\004\034\170\001\002\000\004" +
    "\011\uffae\001\002\000\066\010\uffe3\031\uffe3\066\uffe3\070" +
    "\uffe3\072\uffe3\074\uffe3\076\uffe3\100\uffe3\102\uffe3\104\uffe3" +
    "\106\uffe3\107\uffe3\111\uffe3\121\020\122\022\123\uffe3\124" +
    "\uffe3\125\uffe3\126\uffe3\127\uffe3\130\uffe3\131\uffe3\132\uffe3" +
    "\133\uffe3\134\uffe3\150\uffe3\001\002\000\030\031\173\123" +
    "\137\124\134\125\136\126\140\127\126\130\133\131\131" +
    "\132\130\133\135\134\132\001\002\000\120\002\uffd0\005" +
    "\uffd0\010\uffd0\031\uffd0\032\uffd0\065\uffd0\066\uffd0\067\uffd0" +
    "\070\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075\uffd0\076" +
    "\uffd0\077\uffd0\100\uffd0\101\uffd0\102\uffd0\103\uffd0\104\uffd0" +
    "\105\uffd0\106\uffd0\107\uffd0\110\uffd0\111\uffd0\112\uffd0\123" +
    "\uffd0\124\uffd0\125\uffd0\126\uffd0\127\uffd0\130\uffd0\131\uffd0" +
    "\132\uffd0\133\uffd0\134\uffd0\145\uffd0\150\uffd0\001\002\000" +
    "\120\002\uffc9\005\uffc9\010\uffc9\031\uffc9\032\uffc9\065\uffc9" +
    "\066\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9\073\uffc9\074" +
    "\uffc9\075\uffc9\076\uffc9\077\uffc9\100\uffc9\101\uffc9\102\uffc9" +
    "\103\uffc9\104\uffc9\105\uffc9\106\uffc9\107\uffc9\110\uffc9\111" +
    "\uffc9\112\uffc9\123\uffc9\124\uffc9\125\uffc9\126\uffc9\127\uffc9" +
    "\130\uffc9\131\uffc9\132\uffc9\133\uffc9\134\uffc9\145\uffc9\150" +
    "\uffc9\001\002\000\004\011\206\001\002\000\004\011\205" +
    "\001\002\000\004\011\204\001\002\000\004\011\203\001" +
    "\002\000\004\011\202\001\002\000\120\002\uffc8\005\uffc8" +
    "\010\uffc8\031\uffc8\032\uffc8\065\uffc8\066\uffc8\067\uffc8\070" +
    "\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8" +
    "\077\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8\105" +
    "\uffc8\106\uffc8\107\uffc8\110\uffc8\111\uffc8\112\uffc8\123\uffc8" +
    "\124\uffc8\125\uffc8\126\uffc8\127\uffc8\130\uffc8\131\uffc8\132" +
    "\uffc8\133\uffc8\134\uffc8\145\uffc8\150\uffc8\001\002\000\120" +
    "\002\uffc7\005\uffc7\010\uffc7\031\uffc7\032\uffc7\065\uffc7\066" +
    "\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7" +
    "\075\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7\103" +
    "\uffc7\104\uffc7\105\uffc7\106\uffc7\107\uffc7\110\uffc7\111\uffc7" +
    "\112\uffc7\123\uffc7\124\uffc7\125\uffc7\126\uffc7\127\uffc7\130" +
    "\uffc7\131\uffc7\132\uffc7\133\uffc7\134\uffc7\145\uffc7\150\uffc7" +
    "\001\002\000\120\002\uffd1\005\uffd1\010\uffd1\031\uffd1\032" +
    "\uffd1\065\uffd1\066\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1" +
    "\073\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\100\uffd1\101" +
    "\uffd1\102\uffd1\103\uffd1\104\uffd1\105\uffd1\106\uffd1\107\uffd1" +
    "\110\uffd1\111\uffd1\112\uffd1\123\uffd1\124\uffd1\125\uffd1\126" +
    "\uffd1\127\uffd1\130\uffd1\131\uffd1\132\uffd1\133\uffd1\134\uffd1" +
    "\145\uffd1\150\uffd1\001\002\000\120\002\uffc6\005\uffc6\010" +
    "\uffc6\031\uffc6\032\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6" +
    "\071\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6\076\uffc6\077" +
    "\uffc6\100\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6\105\uffc6" +
    "\106\uffc6\107\uffc6\110\uffc6\111\uffc6\112\uffc6\123\uffc6\124" +
    "\uffc6\125\uffc6\126\uffc6\127\uffc6\130\uffc6\131\uffc6\132\uffc6" +
    "\133\uffc6\134\uffc6\145\uffc6\150\uffc6\001\002\000\120\002" +
    "\uffc5\005\uffc5\010\uffc5\031\uffc5\032\uffc5\065\uffc5\066\uffc5" +
    "\067\uffc5\070\uffc5\071\uffc5\072\uffc5\073\uffc5\074\uffc5\075" +
    "\uffc5\076\uffc5\077\uffc5\100\uffc5\101\uffc5\102\uffc5\103\uffc5" +
    "\104\uffc5\105\uffc5\106\uffc5\107\uffc5\110\uffc5\111\uffc5\112" +
    "\uffc5\123\uffc5\124\uffc5\125\uffc5\126\uffc5\127\uffc5\130\uffc5" +
    "\131\uffc5\132\uffc5\133\uffc5\134\uffc5\145\uffc5\150\uffc5\001" +
    "\002\000\006\011\210\141\211\001\002\000\120\002\uffcb" +
    "\005\uffcb\010\uffcb\031\uffcb\032\uffcb\065\uffcb\066\uffcb\067" +
    "\uffcb\070\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb" +
    "\076\uffcb\077\uffcb\100\uffcb\101\uffcb\102\uffcb\103\uffcb\104" +
    "\uffcb\105\uffcb\106\uffcb\107\uffcb\110\uffcb\111\uffcb\112\uffcb" +
    "\123\uffcb\124\uffcb\125\uffcb\126\uffcb\127\uffcb\130\uffcb\131" +
    "\uffcb\132\uffcb\133\uffcb\134\uffcb\145\uffcb\150\uffcb\001\002" +
    "\000\010\014\213\023\214\024\212\001\002\000\004\033" +
    "\227\001\002\000\004\033\222\001\002\000\004\033\215" +
    "\001\002\000\004\116\216\001\002\000\012\055\163\056" +
    "\164\057\165\060\166\001\002\000\004\116\220\001\002" +
    "\000\004\034\221\001\002\000\006\011\uffc2\141\uffc2\001" +
    "\002\000\004\116\223\001\002\000\004\114\224\001\002" +
    "\000\004\116\225\001\002\000\004\034\226\001\002\000" +
    "\006\011\uffc0\141\uffc0\001\002\000\004\116\230\001\002" +
    "\000\006\114\231\115\233\001\002\000\004\116\uffbe\001" +
    "\002\000\004\116\234\001\002\000\004\116\uffbd\001\002" +
    "\000\004\034\235\001\002\000\006\011\uffc1\141\uffc1\001" +
    "\002\000\006\011\237\141\240\001\002\000\006\020\uffc3" +
    "\146\uffc3\001\002\000\006\135\241\143\242\001\002\000" +
    "\004\033\253\001\002\000\004\033\243\001\002\000\004" +
    "\116\244\001\002\000\006\064\245\117\246\001\002\000" +
    "\004\116\251\001\002\000\004\116\247\001\002\000\004" +
    "\034\250\001\002\000\006\011\uffbc\141\uffbc\001\002\000" +
    "\004\034\252\001\002\000\006\011\uffbb\141\uffbb\001\002" +
    "\000\004\116\254\001\002\000\004\114\255\001\002\000" +
    "\004\116\256\001\002\000\004\034\257\001\002\000\006" +
    "\011\uffba\141\uffba\001\002\000\006\020\262\146\261\001" +
    "\002\000\120\002\uffca\005\uffca\010\uffca\031\uffca\032\uffca" +
    "\065\uffca\066\uffca\067\uffca\070\uffca\071\uffca\072\uffca\073" +
    "\uffca\074\uffca\075\uffca\076\uffca\077\uffca\100\uffca\101\uffca" +
    "\102\uffca\103\uffca\104\uffca\105\uffca\106\uffca\107\uffca\110" +
    "\uffca\111\uffca\112\uffca\123\uffca\124\uffca\125\uffca\126\uffca" +
    "\127\uffca\130\uffca\131\uffca\132\uffca\133\uffca\134\uffca\145" +
    "\uffca\150\uffca\001\002\000\004\122\263\001\002\000\010" +
    "\020\uffc4\146\uffc4\147\uffc4\001\002\000\004\033\275\001" +
    "\002\000\004\033\266\001\002\000\004\116\267\001\002" +
    "\000\004\122\270\001\002\000\004\116\271\001\002\000" +
    "\004\011\272\001\002\000\066\010\uffe3\065\uffe3\066\uffe3" +
    "\070\uffe3\072\uffe3\074\uffe3\076\uffe3\100\uffe3\102\uffe3\104" +
    "\uffe3\106\uffe3\107\uffe3\111\uffe3\121\020\122\022\123\uffe3" +
    "\124\uffe3\125\uffe3\126\uffe3\127\uffe3\130\uffe3\131\uffe3\132" +
    "\uffe3\133\uffe3\134\uffe3\150\uffe3\001\002\000\030\065\274" +
    "\123\137\124\134\125\136\126\140\127\126\130\133\131" +
    "\131\132\130\133\135\134\132\001\002\000\120\002\uffcf" +
    "\005\uffcf\010\uffcf\031\uffcf\032\uffcf\065\uffcf\066\uffcf\067" +
    "\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf" +
    "\076\uffcf\077\uffcf\100\uffcf\101\uffcf\102\uffcf\103\uffcf\104" +
    "\uffcf\105\uffcf\106\uffcf\107\uffcf\110\uffcf\111\uffcf\112\uffcf" +
    "\123\uffcf\124\uffcf\125\uffcf\126\uffcf\127\uffcf\130\uffcf\131" +
    "\uffcf\132\uffcf\133\uffcf\134\uffcf\145\uffcf\150\uffcf\001\002" +
    "\000\004\116\276\001\002\000\004\136\277\001\002\000" +
    "\004\122\300\001\002\000\004\116\301\001\002\000\004" +
    "\011\302\001\002\000\066\010\uffe3\065\uffe3\066\uffe3\070" +
    "\uffe3\072\uffe3\074\uffe3\076\uffe3\100\uffe3\102\uffe3\104\uffe3" +
    "\106\uffe3\107\uffe3\111\uffe3\121\020\122\022\123\uffe3\124" +
    "\uffe3\125\uffe3\126\uffe3\127\uffe3\130\uffe3\131\uffe3\132\uffe3" +
    "\133\uffe3\134\uffe3\150\uffe3\001\002\000\030\065\304\123" +
    "\137\124\134\125\136\126\140\127\126\130\133\131\131" +
    "\132\130\133\135\134\132\001\002\000\120\002\uffce\005" +
    "\uffce\010\uffce\031\uffce\032\uffce\065\uffce\066\uffce\067\uffce" +
    "\070\uffce\071\uffce\072\uffce\073\uffce\074\uffce\075\uffce\076" +
    "\uffce\077\uffce\100\uffce\101\uffce\102\uffce\103\uffce\104\uffce" +
    "\105\uffce\106\uffce\107\uffce\110\uffce\111\uffce\112\uffce\123" +
    "\uffce\124\uffce\125\uffce\126\uffce\127\uffce\130\uffce\131\uffce" +
    "\132\uffce\133\uffce\134\uffce\145\uffce\150\uffce\001\002\000" +
    "\006\011\306\141\307\001\002\000\006\020\uffc3\147\uffc3" +
    "\001\002\000\004\143\310\001\002\000\004\033\311\001" +
    "\002\000\004\116\312\001\002\000\010\061\314\062\315" +
    "\063\316\001\002\000\004\116\317\001\002\000\004\116" +
    "\uffb6\001\002\000\004\116\uffb5\001\002\000\004\116\uffb4" +
    "\001\002\000\004\034\320\001\002\000\006\011\uffb8\141" +
    "\uffb8\001\002\000\006\020\262\147\322\001\002\000\120" +
    "\002\uffcc\005\uffcc\010\uffcc\031\uffcc\032\uffcc\065\uffcc\066" +
    "\uffcc\067\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc\074\uffcc" +
    "\075\uffcc\076\uffcc\077\uffcc\100\uffcc\101\uffcc\102\uffcc\103" +
    "\uffcc\104\uffcc\105\uffcc\106\uffcc\107\uffcc\110\uffcc\111\uffcc" +
    "\112\uffcc\123\uffcc\124\uffcc\125\uffcc\126\uffcc\127\uffcc\130" +
    "\uffcc\131\uffcc\132\uffcc\133\uffcc\134\uffcc\145\uffcc\150\uffcc" +
    "\001\002\000\006\011\324\141\325\001\002\000\066\010" +
    "\uffe3\032\uffe3\066\uffe3\070\uffe3\072\uffe3\074\uffe3\076\uffe3" +
    "\100\uffe3\102\uffe3\104\uffe3\106\uffe3\107\uffe3\111\uffe3\121" +
    "\020\122\022\123\uffe3\124\uffe3\125\uffe3\126\uffe3\127\uffe3" +
    "\130\uffe3\131\uffe3\132\uffe3\133\uffe3\134\uffe3\150\uffe3\001" +
    "\002\000\012\014\330\015\326\023\331\144\327\001\002" +
    "\000\004\033\351\001\002\000\004\033\344\001\002\000" +
    "\004\033\337\001\002\000\004\033\332\001\002\000\004" +
    "\116\333\001\002\000\012\055\163\056\164\057\165\060" +
    "\166\001\002\000\004\116\335\001\002\000\004\034\336" +
    "\001\002\000\006\011\uffb2\141\uffb2\001\002\000\004\116" +
    "\340\001\002\000\004\114\341\001\002\000\004\116\342" +
    "\001\002\000\004\034\343\001\002\000\006\011\uffb3\141" +
    "\uffb3\001\002\000\004\116\345\001\002\000\044\035\046" +
    "\036\047\037\045\040\051\041\050\042\053\043\062\044" +
    "\044\045\052\046\056\047\042\050\061\051\063\052\054" +
    "\053\057\054\043\120\060\001\002\000\004\116\347\001" +
    "\002\000\004\034\350\001\002\000\006\011\uffb0\141\uffb0" +
    "\001\002\000\004\116\352\001\002\000\006\121\020\122" +
    "\022\001\002\000\006\116\354\121\023\001\002\000\004" +
    "\034\355\001\002\000\006\011\uffb1\141\uffb1\001\002\000" +
    "\030\032\357\123\137\124\134\125\136\126\140\127\126" +
    "\130\133\131\131\132\130\133\135\134\132\001\002\000" +
    "\120\002\uffcd\005\uffcd\010\uffcd\031\uffcd\032\uffcd\065\uffcd" +
    "\066\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\074" +
    "\uffcd\075\uffcd\076\uffcd\077\uffcd\100\uffcd\101\uffcd\102\uffcd" +
    "\103\uffcd\104\uffcd\105\uffcd\106\uffcd\107\uffcd\110\uffcd\111" +
    "\uffcd\112\uffcd\123\uffcd\124\uffcd\125\uffcd\126\uffcd\127\uffcd" +
    "\130\uffcd\131\uffcd\132\uffcd\133\uffcd\134\uffcd\145\uffcd\150" +
    "\uffcd\001\002\000\030\071\361\123\137\124\134\125\136" +
    "\126\140\127\126\130\133\131\131\132\130\133\135\134" +
    "\132\001\002\000\120\002\uffdf\005\uffdf\010\uffdf\031\uffdf" +
    "\032\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf\071\uffdf\072" +
    "\uffdf\073\uffdf\074\uffdf\075\uffdf\076\uffdf\077\uffdf\100\uffdf" +
    "\101\uffdf\102\uffdf\103\uffdf\104\uffdf\105\uffdf\106\uffdf\107" +
    "\uffdf\110\uffdf\111\uffdf\112\uffdf\123\uffdf\124\uffdf\125\uffdf" +
    "\126\uffdf\127\uffdf\130\uffdf\131\uffdf\132\uffdf\133\uffdf\134" +
    "\uffdf\145\uffdf\150\uffdf\001\002\000\030\067\363\123\137" +
    "\124\134\125\136\126\140\127\126\130\133\131\131\132" +
    "\130\133\135\134\132\001\002\000\120\002\uffe0\005\uffe0" +
    "\010\uffe0\031\uffe0\032\uffe0\065\uffe0\066\uffe0\067\uffe0\070" +
    "\uffe0\071\uffe0\072\uffe0\073\uffe0\074\uffe0\075\uffe0\076\uffe0" +
    "\077\uffe0\100\uffe0\101\uffe0\102\uffe0\103\uffe0\104\uffe0\105" +
    "\uffe0\106\uffe0\107\uffe0\110\uffe0\111\uffe0\112\uffe0\123\uffe0" +
    "\124\uffe0\125\uffe0\126\uffe0\127\uffe0\130\uffe0\131\uffe0\132" +
    "\uffe0\133\uffe0\134\uffe0\145\uffe0\150\uffe0\001\002\000\030" +
    "\110\365\123\137\124\134\125\136\126\140\127\126\130" +
    "\133\131\131\132\130\133\135\134\132\001\002\000\120" +
    "\002\uffd6\005\uffd6\010\uffd6\031\uffd6\032\uffd6\065\uffd6\066" +
    "\uffd6\067\uffd6\070\uffd6\071\uffd6\072\uffd6\073\uffd6\074\uffd6" +
    "\075\uffd6\076\uffd6\077\uffd6\100\uffd6\101\uffd6\102\uffd6\103" +
    "\uffd6\104\uffd6\105\uffd6\106\uffd6\107\uffd6\110\uffd6\111\uffd6" +
    "\112\uffd6\123\uffd6\124\uffd6\125\uffd6\126\uffd6\127\uffd6\130" +
    "\uffd6\131\uffd6\132\uffd6\133\uffd6\134\uffd6\145\uffd6\150\uffd6" +
    "\001\002\000\030\105\367\123\137\124\134\125\136\126" +
    "\140\127\126\130\133\131\131\132\130\133\135\134\132" +
    "\001\002\000\120\002\uffd9\005\uffd9\010\uffd9\031\uffd9\032" +
    "\uffd9\065\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9\072\uffd9" +
    "\073\uffd9\074\uffd9\075\uffd9\076\uffd9\077\uffd9\100\uffd9\101" +
    "\uffd9\102\uffd9\103\uffd9\104\uffd9\105\uffd9\106\uffd9\107\uffd9" +
    "\110\uffd9\111\uffd9\112\uffd9\123\uffd9\124\uffd9\125\uffd9\126" +
    "\uffd9\127\uffd9\130\uffd9\131\uffd9\132\uffd9\133\uffd9\134\uffd9" +
    "\145\uffd9\150\uffd9\001\002\000\030\077\371\123\137\124" +
    "\134\125\136\126\140\127\126\130\133\131\131\132\130" +
    "\133\135\134\132\001\002\000\120\002\uffdd\005\uffdd\010" +
    "\uffdd\031\uffdd\032\uffdd\065\uffdd\066\uffdd\067\uffdd\070\uffdd" +
    "\071\uffdd\072\uffdd\073\uffdd\074\uffdd\075\uffdd\076\uffdd\077" +
    "\uffdd\100\uffdd\101\uffdd\102\uffdd\103\uffdd\104\uffdd\105\uffdd" +
    "\106\uffdd\107\uffdd\110\uffdd\111\uffdd\112\uffdd\123\uffdd\124" +
    "\uffdd\125\uffdd\126\uffdd\127\uffdd\130\uffdd\131\uffdd\132\uffdd" +
    "\133\uffdd\134\uffdd\145\uffdd\150\uffdd\001\002\000\030\101" +
    "\373\123\137\124\134\125\136\126\140\127\126\130\133" +
    "\131\131\132\130\133\135\134\132\001\002\000\120\002" +
    "\uffdc\005\uffdc\010\uffdc\031\uffdc\032\uffdc\065\uffdc\066\uffdc" +
    "\067\uffdc\070\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc\075" +
    "\uffdc\076\uffdc\077\uffdc\100\uffdc\101\uffdc\102\uffdc\103\uffdc" +
    "\104\uffdc\105\uffdc\106\uffdc\107\uffdc\110\uffdc\111\uffdc\112" +
    "\uffdc\123\uffdc\124\uffdc\125\uffdc\126\uffdc\127\uffdc\130\uffdc" +
    "\131\uffdc\132\uffdc\133\uffdc\134\uffdc\145\uffdc\150\uffdc\001" +
    "\002\000\030\112\375\123\137\124\134\125\136\126\140" +
    "\127\126\130\133\131\131\132\130\133\135\134\132\001" +
    "\002\000\120\002\uffd5\005\uffd5\010\uffd5\031\uffd5\032\uffd5" +
    "\065\uffd5\066\uffd5\067\uffd5\070\uffd5\071\uffd5\072\uffd5\073" +
    "\uffd5\074\uffd5\075\uffd5\076\uffd5\077\uffd5\100\uffd5\101\uffd5" +
    "\102\uffd5\103\uffd5\104\uffd5\105\uffd5\106\uffd5\107\uffd5\110" +
    "\uffd5\111\uffd5\112\uffd5\123\uffd5\124\uffd5\125\uffd5\126\uffd5" +
    "\127\uffd5\130\uffd5\131\uffd5\132\uffd5\133\uffd5\134\uffd5\145" +
    "\uffd5\150\uffd5\001\002\000\030\075\377\123\137\124\134" +
    "\125\136\126\140\127\126\130\133\131\131\132\130\133" +
    "\135\134\132\001\002\000\120\002\uffde\005\uffde\010\uffde" +
    "\031\uffde\032\uffde\065\uffde\066\uffde\067\uffde\070\uffde\071" +
    "\uffde\072\uffde\073\uffde\074\uffde\075\uffde\076\uffde\077\uffde" +
    "\100\uffde\101\uffde\102\uffde\103\uffde\104\uffde\105\uffde\106" +
    "\uffde\107\uffde\110\uffde\111\uffde\112\uffde\123\uffde\124\uffde" +
    "\125\uffde\126\uffde\127\uffde\130\uffde\131\uffde\132\uffde\133" +
    "\uffde\134\uffde\145\uffde\150\uffde\001\002\000\042\002\uffe3" +
    "\005\uffe3\010\uffe3\066\uffe3\070\uffe3\072\uffe3\074\uffe3\076" +
    "\uffe3\100\uffe3\102\uffe3\104\uffe3\106\uffe3\107\uffe3\111\uffe3" +
    "\145\uffe3\150\uffe3\001\002\000\010\022\u0103\025\u0104\142" +
    "\u0102\001\002\000\004\033\u010f\001\002\000\004\033\u010a" +
    "\001\002\000\004\033\u0105\001\002\000\004\116\u0106\001" +
    "\002\000\044\035\046\036\047\037\045\040\051\041\050" +
    "\042\053\043\062\044\044\045\052\046\056\047\042\050" +
    "\061\051\063\052\054\053\057\054\043\120\060\001\002" +
    "\000\004\116\u0108\001\002\000\004\034\u0109\001\002\000" +
    "\006\011\uffea\141\uffea\001\002\000\004\116\u010b\001\002" +
    "\000\044\035\046\036\047\037\045\040\051\041\050\042" +
    "\053\043\062\044\044\045\052\046\056\047\042\050\061" +
    "\051\063\052\054\053\057\054\043\120\060\001\002\000" +
    "\004\116\u010d\001\002\000\004\034\u010e\001\002\000\006" +
    "\011\uffe9\141\uffe9\001\002\000\004\116\u0110\001\002\000" +
    "\044\035\046\036\047\037\045\040\051\041\050\042\053" +
    "\043\062\044\044\045\052\046\056\047\042\050\061\051" +
    "\063\052\054\053\057\054\043\120\060\001\002\000\004" +
    "\116\u0112\001\002\000\004\034\u0113\001\002\000\006\011" +
    "\uffe8\141\uffe8\001\002\000\006\002\uffee\005\uffee\001\002" +
    "\000\004\002\ufffd\001\002\000\004\002\000\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0115\000\006\002\003\004\004\001\001\000\002\001" +
    "\001\000\006\003\006\006\007\001\001\000\002\001\001" +
    "\000\004\010\025\001\001\000\010\007\015\016\013\020" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\020\001\001\000\004\007\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\u0115" +
    "\001\001\000\002\001\001\000\006\012\031\035\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\077" +
    "\017\101\036\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\105\037" +
    "\102\001\001\000\002\001\001\000\012\013\077\017\122" +
    "\022\375\034\124\001\001\000\012\013\077\017\122\022" +
    "\373\034\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\013\077\017\122\022\371\034\124\001\001\000" +
    "\012\013\077\017\122\022\367\034\124\001\001\000\012" +
    "\013\077\017\122\022\365\034\124\001\001\000\012\013" +
    "\077\017\122\022\363\034\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\077\017\122\022\361\034" +
    "\124\001\001\000\012\013\077\017\122\022\357\034\124" +
    "\001\001\000\010\033\146\042\152\043\151\001\001\000" +
    "\012\013\077\017\122\022\140\034\124\001\001\000\012" +
    "\013\077\017\122\022\123\034\124\001\001\000\006\032" +
    "\105\037\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\322\001\001\000\004\024\304\001\001\000" +
    "\002\001\001\000\004\026\235\001\001\000\002\001\001" +
    "\000\004\027\206\001\001\000\004\041\173\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\013\077\017\122\022\171\034\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\216\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\231\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\257\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\077\017\122\022\272\034\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\013\077\017\122\022\302\034\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\320\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\312\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\077\017\122\022" +
    "\355\034\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\333\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\345\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\352\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\077\017\101\036\u0113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\u0106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\u010b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\u0110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	// Connect this parser to a scanner!


	public parserHTML(Analizador_HTML lex) {
		super(lex);
	}

        public void syntax_error(Symbol cur_token) {
					ErrorI.addError(new ErrorI((cur_token.left),(cur_token.right),"El token " + cur_token.value + " no esta reconocido en esta regla de la gramatica sintactica de HTML",MainFrame.currentFile,'b'));
        
        }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parserHTML parser;

  /** Constructor */
  CUP$parser$actions(parserHTML parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // newText ::= TAG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("newText",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // newText ::= TEXTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("newText",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // newText ::= newText TEXTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("newText",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // textito ::= textito AMP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("textito",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // textito ::= textito GT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("textito",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // textito ::= textito LT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("textito",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // textito ::= textito NTILDEMIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("textito",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // textito ::= textito NTILDEMAY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("textito",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // textito ::= textito UACUTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("textito",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // textito ::= textito OACUTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("textito",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // textito ::= textito IACUTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("textito",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // textito ::= textito EACUTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("textito",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // textito ::= textito AACUTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("textito",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // textito ::= newText 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("textito",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // textito ::= body1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("textito",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // color ::= HEXADECIMAL 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // color ::= AQUA 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // color ::= YELLOW 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // color ::= SILVER 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // color ::= PURPLE 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // color ::= WHITE 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // color ::= GREEN 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // color ::= FUCHSIA 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // color ::= LIME 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // color ::= GRAY 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // color ::= NAVY 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // color ::= MAROON 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // color ::= BLUE 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // color ::= RED 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // color ::= TEAL 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // color ::= OLIVE 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // color ::= BLACK 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // alineacion ::= JUSTIFIED 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alineacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // alineacion ::= CENTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alineacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // alineacion ::= RIGHT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alineacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // alineacion ::= LEFT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alineacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // opParrafo ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opParrafo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // opParrafo ::= CABIERTO ALIGN IGUAL COMILLA alineacion COMILLA CCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opParrafo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // opcionesFont ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesFont",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // opcionesFont ::= opcionesFont CABIERTO COLOR IGUAL COMILLA color COMILLA CCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesFont",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // opcionesFont ::= opcionesFont CABIERTO FACE IGUAL COMILLA newText COMILLA CCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesFont",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // opcionesFont ::= opcionesFont CABIERTO ALIGN IGUAL COMILLA alineacion COMILLA CCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesFont",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // opcionesFont ::= opcionesFont CABIERTO SIZE IGUAL COMILLA NUMERO COMILLA CCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesFont",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // opcionesUl ::= DISC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesUl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // opcionesUl ::= SQUARE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesUl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // opcionesUl ::= CIRCLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesUl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ul ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ul",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ul ::= ul CABIERTO TYPE IGUAL COMILLA opcionesUl COMILLA CCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ul",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ol ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ol",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ol ::= ol CABIERTO START IGUAL COMILLA NUMERO COMILLA CCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ol",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ol ::= ol CABIERTO TYPE IGUAL COMILLA OREF COMILLA CCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ol",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ol ::= ol CABIERTO TYPE IGUAL COMILLA TIPO COMILLA CCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ol",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tipoWidth ::= PORCENTAJE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoWidth",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tipoWidth ::= NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoWidth",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // opcionesHr ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesHr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // opcionesHr ::= opcionesHr CABIERTO SIZE IGUAL COMILLA NUMERO COMILLA CCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesHr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // opcionesHr ::= opcionesHr CABIERTO WIDTH IGUAL COMILLA tipoWidth COMILLA CCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesHr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // opcionesHr ::= opcionesHr CABIERTO ALIGN IGUAL COMILLA alineacion COMILLA CCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesHr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // listado ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listado",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // listado ::= listado LI TAG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listado",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // restBody3 ::= OL CIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("restBody3",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // restBody3 ::= UL CIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("restBody3",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // restBody3 ::= FONT CIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("restBody3",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // restBody3 ::= PARAGRAPH CIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("restBody3",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // restBody4 ::= DIAGONAL restBody3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("restBody4",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // restBody ::= OL ol CIERRE listado COL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("restBody",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // restBody ::= HR opcionesHr CIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("restBody",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // restBody ::= UL ul CIERRE listado CUL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("restBody",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // restBody ::= FONT opcionesFont CIERRE textito CFONT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("restBody",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // restBody ::= OREF HREF IGUAL COMILLA SIGNO_GATO TAG COMILLA CIERRE textito CREF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("restBody",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // restBody ::= OREF NAME IGUAL COMILLA TAG COMILLA CIERRE textito CREF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("restBody",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // restBody ::= PARAGRAPH opParrafo CIERRE textito CP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("restBody",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // restBody ::= DIAGONAL BODY CIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("restBody",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // restBody5 ::= restBody4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("restBody5",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // restBody5 ::= restBody 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("restBody5",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // restBody1 ::= APERTURA restBody5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("restBody1",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // entrBody ::= OBLOCKQUOTE textito CBLOCKQUOTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entrBody",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // entrBody ::= ONOBR textito CNOBR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entrBody",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // entrBody ::= PAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entrBody",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // entrBody ::= BR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entrBody",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // entrBody ::= OSUP textito CSUP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entrBody",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // entrBody ::= OSUB textito CSUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entrBody",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // entrBody ::= OSUBRA textito CSUBRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entrBody",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // entrBody ::= OBLINK textito CBLINK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entrBody",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // entrBody ::= OSTRIKE textito CSTRIKE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entrBody",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // entrBody ::= OITALIC textito CITALIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entrBody",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // entrBody ::= OBOLD textito CBOLD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entrBody",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // entrBody ::= OCENTER textito CCENTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entrBody",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // entrBody ::= restBody1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entrBody",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // body ::= body1 entrBody 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // body1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // body1 ::= body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // s3 ::= CABIERTO LINK IGUAL COMILLA color COMILLA CCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // s3 ::= CABIERTO TEXT IGUAL COMILLA color COMILLA CCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // s3 ::= CABIERTO BGCOLOR IGUAL COMILLA color COMILLA CCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // s3 ::= s3 CABIERTO LINK IGUAL COMILLA color COMILLA CCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // s3 ::= s3 CABIERTO TEXT IGUAL COMILLA color COMILLA CCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // s3 ::= s3 CABIERTO BGCOLOR IGUAL COMILLA color COMILLA CCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // impBody2 ::= body1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("impBody2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // impBody2 ::= body1 CBODY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("impBody2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // impBody ::= CIERRE impBody2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("impBody",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // impBody ::= s3 CIERRE impBody2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("impBody",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // s2 ::= APERTURA BODY impBody 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // s2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // finTitle ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("finTitle",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // finTitle ::= CTITLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("finTitle",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // initTitle ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("initTitle",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // initTitle ::= OTITLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("initTitle",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // title ::= initTitle newText finTitle 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("title",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // finHead ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("finHead",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // finHead ::= CHEAD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("finHead",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // initHead ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("initHead",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // initHead ::= OHEAD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("initHead",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // s1 ::= initHead title finHead 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // s1 ::= initHead finHead 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // finHTML ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("finHTML",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // finHTML ::= CHTML 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("finHTML",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // initHTML ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("initHTML",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // initHTML ::= OHTML 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("initHTML",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s0 ::= initHTML s1 s2 finHTML 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s0 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

