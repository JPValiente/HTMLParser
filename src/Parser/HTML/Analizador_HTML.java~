/* The following code was generated by JFlex 1.7.0 */

package Parser.HTML;

import Backend.Objects.ErrorI;
import Frontend.MainFrame;
import Parser.EmbedCode.sym;
import static Parser.EmbedCode.sym.CCERRADO;
import java_cup.runtime.*;
import Parser.HTML.symHTML;
import static Parser.HTML.symHTML.AACUTE;
import static Parser.HTML.symHTML.ALIGN;
import static Parser.HTML.symHTML.AMP;
import static Parser.HTML.symHTML.APERTURA;
import static Parser.HTML.symHTML.AQUA;
import static Parser.HTML.symHTML.BGCOLOR;
import static Parser.HTML.symHTML.BLUE;
import static Parser.HTML.symHTML.BODY;
import static Parser.HTML.symHTML.BR;
import static Parser.HTML.symHTML.CABIERTO;
import static Parser.HTML.symHTML.CBLINK;
import static Parser.HTML.symHTML.CBLOCKQUOTE;
import static Parser.HTML.symHTML.CBODY;
import static Parser.HTML.symHTML.CBOLD;
import static Parser.HTML.symHTML.CCENTER;
import static Parser.HTML.symHTML.CENTER;
import static Parser.HTML.symHTML.CFONT;
import static Parser.HTML.symHTML.CHEAD;
import static Parser.HTML.symHTML.CHTML;
import static Parser.HTML.symHTML.CIERRE;
import static Parser.HTML.symHTML.CIRCLE;
import static Parser.HTML.symHTML.CITALIC;
import static Parser.HTML.symHTML.CNOBR;
import static Parser.HTML.symHTML.COL;
import static Parser.HTML.symHTML.COLOR;
import static Parser.HTML.symHTML.COMILLA;
import static Parser.HTML.symHTML.CP;
import static Parser.HTML.symHTML.CREF;
import static Parser.HTML.symHTML.CSTRIKE;
import static Parser.HTML.symHTML.CSUB;
import static Parser.HTML.symHTML.CSUBRA;
import static Parser.HTML.symHTML.CSUP;
import static Parser.HTML.symHTML.CTITLE;
import static Parser.HTML.symHTML.CUL;
import static Parser.HTML.symHTML.DIAGONAL;
import static Parser.HTML.symHTML.DISC;
import static Parser.HTML.symHTML.EACUTE;
import static Parser.HTML.symHTML.EOF;
import static Parser.HTML.symHTML.FACE;
import static Parser.HTML.symHTML.FONT;
import static Parser.HTML.symHTML.FUCHSIA;
import static Parser.HTML.symHTML.GRAY;
import static Parser.HTML.symHTML.GREEN;
import static Parser.HTML.symHTML.GT;
import static Parser.HTML.symHTML.HEXADECIMAL;
import static Parser.HTML.symHTML.HR;
import static Parser.HTML.symHTML.HREF;
import static Parser.HTML.symHTML.IACUTE;
import static Parser.HTML.symHTML.IGUAL;
import static Parser.HTML.symHTML.JUSTIFIED;
import static Parser.HTML.symHTML.LI;
import static Parser.HTML.symHTML.LIME;
import static Parser.HTML.symHTML.LINK;
import static Parser.HTML.symHTML.LT;
import static Parser.HTML.symHTML.MAROON;
import static Parser.HTML.symHTML.NAME;
import static Parser.HTML.symHTML.NAVY;
import static Parser.HTML.symHTML.NTILDEMAY;
import static Parser.HTML.symHTML.NTILDEMIN;
import static Parser.HTML.symHTML.NUMERO;
import static Parser.HTML.symHTML.OACUTE;
import static Parser.HTML.symHTML.OBLINK;
import static Parser.HTML.symHTML.OBLOCKQUOTE;
import static Parser.HTML.symHTML.OBOLD;
import static Parser.HTML.symHTML.OCENTER;
import static Parser.HTML.symHTML.OHEAD;
import static Parser.HTML.symHTML.OHTML;
import static Parser.HTML.symHTML.OITALIC;
import static Parser.HTML.symHTML.OL;
import static Parser.HTML.symHTML.OLIVE;
import static Parser.HTML.symHTML.ONOBR;
import static Parser.HTML.symHTML.OREF;
import static Parser.HTML.symHTML.OSTRIKE;
import static Parser.HTML.symHTML.OSUB;
import static Parser.HTML.symHTML.OSUBRA;
import static Parser.HTML.symHTML.OSUP;
import static Parser.HTML.symHTML.OTITLE;
import static Parser.HTML.symHTML.PAR;
import static Parser.HTML.symHTML.PARAGRAPH;
import static Parser.HTML.symHTML.PORCENTAJE;
import static Parser.HTML.symHTML.PURPLE;
import static Parser.HTML.symHTML.RED;
import static Parser.HTML.symHTML.RIGHT;
import static Parser.HTML.symHTML.SIGNO_GATO;
import static Parser.HTML.symHTML.SILVER;
import static Parser.HTML.symHTML.SQUARE;
import static Parser.HTML.symHTML.START;
import static Parser.HTML.symHTML.TAG;
import static Parser.HTML.symHTML.TEAL;
import static Parser.HTML.symHTML.TEXT;
import static Parser.HTML.symHTML.TEXTO;
import static Parser.HTML.symHTML.TIPO;
import static Parser.HTML.symHTML.UACUTE;
import static Parser.HTML.symHTML.UL;
import static Parser.HTML.symHTML.WHITE;
import static Parser.HTML.symHTML.WIDTH;
import static Parser.HTML.symHTML.YELLOW;
import static Parser.HTML.symHTML.BLACK;
import static Parser.HTML.symHTML.SIZE;
import static Parser.HTML.symHTML.TYPE;
import static Parser.HTML.symHTML.LEFT;
import javax.swing.text.html.HTMLEditorKit.Parser;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/home/anclenius/Documents/Analisis_HTML/MeroHTML/JFLEX.flex</tt>
 */
public class Analizador_HTML implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\4\2\0\1\4\22\0\1\4\1\0\1\6\1\5"+
    "\1\1\1\10\1\52\1\0\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\0\1\11\1\3\1\17\10\3\1\1\1\0\1\14\1\7\1\15"+
    "\2\0\1\20\14\2\1\53\14\2\1\12\1\0\1\13\1\0\1\1"+
    "\1\0\1\16\1\30\1\37\1\26\1\25\1\36\1\44\1\21\1\27"+
    "\1\51\1\43\1\24\1\23\1\42\1\31\1\35\1\50\1\46\1\33"+
    "\1\22\1\40\1\47\1\45\1\41\1\32\1\34\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff95\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\2\17"+
    "\11\3\1\20\10\3\1\1\1\3\1\4\1\21\13\0"+
    "\2\3\1\22\11\3\1\23\13\3\1\24\7\3\11\0"+
    "\1\3\1\4\20\0\1\25\1\26\4\0\1\27\1\0"+
    "\1\30\1\0\42\3\1\31\2\3\2\0\1\32\5\0"+
    "\1\33\1\0\1\3\1\4\1\34\3\0\1\35\1\36"+
    "\5\0\1\37\2\0\1\40\5\0\1\41\2\0\1\42"+
    "\5\0\1\3\1\43\1\44\1\45\1\46\1\47\1\3"+
    "\1\50\1\51\1\52\1\53\1\3\1\54\1\55\5\3"+
    "\1\56\2\3\1\57\1\60\4\3\1\61\1\62\1\63"+
    "\5\3\1\0\1\64\6\0\1\3\1\4\6\0\1\65"+
    "\5\0\1\66\7\0\1\67\1\70\2\0\1\71\1\3"+
    "\1\72\1\3\1\73\1\3\1\74\6\3\1\75\1\76"+
    "\1\77\1\100\1\101\1\3\7\0\1\102\1\4\7\0"+
    "\1\103\1\104\3\0\1\105\1\106\5\0\1\107\1\110"+
    "\1\102\1\111\1\112\1\113\1\114\1\102\1\115\1\116"+
    "\1\102\7\0\1\3\1\117\1\120\3\0\1\121\1\0"+
    "\1\122\1\0\1\123\1\124\1\125\3\0\1\126\1\127"+
    "\1\3\1\130\1\131\1\132\1\133\1\134\1\135\1\136"+
    "\1\137\1\140\4\0\1\141\1\142\1\3\1\0\1\143"+
    "\1\144\1\0\1\145\5\0\1\146\1\147";

  private static int [] zzUnpackAction() {
    int [] result = new int[379];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\54\0\130\0\54"+
    "\0\130\0\130\0\130\0\130\0\334\0\54\0\u0108\0\260"+
    "\0\204\0\u0134\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c"+
    "\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c"+
    "\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4\0\54\0\u04d0"+
    "\0\u04fc\0\u0528\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0630"+
    "\0\u065c\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0764\0\u0790"+
    "\0\u07bc\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0"+
    "\0\u091c\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\u0a24\0\u0a50"+
    "\0\u0a7c\0\u0aa8\0\u0478\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u0b84"+
    "\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4"+
    "\0\u0d10\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0\0\u0dec\0\u0e18\0\u0e44"+
    "\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4"+
    "\0\u0fd0\0\u0ffc\0\u1028\0\u1054\0\u1080\0\54\0\54\0\u10ac"+
    "\0\u10d8\0\u1104\0\u1130\0\54\0\u115c\0\54\0\u1188\0\u11b4"+
    "\0\u11e0\0\u120c\0\u1238\0\u1264\0\u1290\0\u12bc\0\u12e8\0\u1314"+
    "\0\u1340\0\u136c\0\u1398\0\u13c4\0\u13f0\0\u141c\0\u1448\0\u1474"+
    "\0\u14a0\0\u14cc\0\u14f8\0\u1524\0\u1550\0\u157c\0\u15a8\0\u15d4"+
    "\0\u1600\0\u162c\0\u1658\0\u1684\0\u16b0\0\u16dc\0\u1708\0\u1734"+
    "\0\u1760\0\u0d94\0\u178c\0\u17b8\0\u17e4\0\u1810\0\54\0\u183c"+
    "\0\u1868\0\u1894\0\u18c0\0\u18ec\0\54\0\u1918\0\u1944\0\u1970"+
    "\0\54\0\u199c\0\u19c8\0\u19f4\0\54\0\54\0\u1a20\0\u1a4c"+
    "\0\u1a78\0\u1aa4\0\u1ad0\0\54\0\u1afc\0\u1b28\0\54\0\u1b54"+
    "\0\u1b80\0\u1bac\0\u1bd8\0\u1c04\0\54\0\u1c30\0\u1c5c\0\54"+
    "\0\u1c88\0\u1cb4\0\u1ce0\0\u1d0c\0\u1d38\0\u1d64\0\u1944\0\u1944"+
    "\0\u1944\0\u1944\0\u1944\0\u1d90\0\u1944\0\u1944\0\u1944\0\u1944"+
    "\0\u1dbc\0\u1944\0\u1944\0\u1de8\0\u1e14\0\u1e40\0\u1e6c\0\u1e98"+
    "\0\u1944\0\u1ec4\0\u1ef0\0\u1944\0\u1944\0\u1f1c\0\u1f48\0\u1f74"+
    "\0\u1fa0\0\u1944\0\u1944\0\u1944\0\u1fcc\0\u1ff8\0\u2024\0\u2050"+
    "\0\u207c\0\u20a8\0\54\0\u20d4\0\u2100\0\u212c\0\u2158\0\u2184"+
    "\0\u21b0\0\u21dc\0\u2208\0\u2234\0\u2260\0\u228c\0\u22b8\0\u22e4"+
    "\0\u2310\0\54\0\u233c\0\u2368\0\u2394\0\u23c0\0\u23ec\0\54"+
    "\0\u2418\0\u2444\0\u2470\0\u249c\0\u24c8\0\u24f4\0\u2520\0\54"+
    "\0\54\0\u254c\0\u2578\0\u21dc\0\u25a4\0\u21dc\0\u25d0\0\u21dc"+
    "\0\u25fc\0\u21dc\0\u2628\0\u2654\0\u2680\0\u26ac\0\u26d8\0\u2704"+
    "\0\u21dc\0\u21dc\0\u21dc\0\u21dc\0\u21dc\0\u2730\0\u275c\0\u2788"+
    "\0\u27b4\0\u27e0\0\u280c\0\u2838\0\u2864\0\u2890\0\u28bc\0\u28e8"+
    "\0\u2914\0\u2940\0\u296c\0\u2998\0\u29c4\0\u29f0\0\54\0\54"+
    "\0\u2a1c\0\u2a48\0\u2a74\0\54\0\54\0\u2aa0\0\u2acc\0\u2af8"+
    "\0\u2b24\0\u2b50\0\54\0\u2890\0\u2b7c\0\u2890\0\u2890\0\u2890"+
    "\0\u2890\0\u2ba8\0\u2890\0\u2890\0\u2bd4\0\u2c00\0\u2c2c\0\u2c58"+
    "\0\u2c84\0\u2cb0\0\u2cdc\0\u2d08\0\u2890\0\54\0\54\0\u2d34"+
    "\0\u2d60\0\u2d8c\0\54\0\u2db8\0\54\0\u2de4\0\54\0\54"+
    "\0\54\0\u2e10\0\u2e3c\0\u2e68\0\u2890\0\u2890\0\u2e94\0\54"+
    "\0\54\0\54\0\54\0\54\0\54\0\54\0\54\0\54"+
    "\0\u2ec0\0\u2eec\0\u2f18\0\u2f44\0\54\0\54\0\u2f70\0\u2f9c"+
    "\0\54\0\54\0\u2fc8\0\u2890\0\u2ff4\0\u3020\0\u304c\0\u3078"+
    "\0\u30a4\0\54\0\54";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[379];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\2\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\4\1\26\1\4"+
    "\1\27\1\30\1\31\1\32\1\4\1\33\1\34\1\35"+
    "\1\36\1\4\1\37\1\4\1\40\1\41\1\42\2\4"+
    "\1\43\1\44\1\4\55\0\3\3\1\0\1\3\1\0"+
    "\1\3\1\0\3\3\2\0\34\3\1\0\1\3\1\0"+
    "\1\3\2\45\1\0\1\3\1\0\1\3\1\0\3\3"+
    "\2\0\34\45\1\0\1\45\1\0\1\3\1\45\1\46"+
    "\1\0\1\3\1\0\1\3\1\47\3\3\2\0\1\45"+
    "\1\46\32\45\1\0\1\45\11\0\1\50\7\0\1\51"+
    "\1\52\1\0\1\53\2\0\1\54\1\55\2\0\1\56"+
    "\1\0\1\57\1\0\1\60\1\61\1\0\1\62\12\0"+
    "\1\3\2\45\1\0\1\3\1\0\1\3\1\0\3\3"+
    "\2\0\6\45\1\63\23\45\1\64\1\45\1\0\1\45"+
    "\1\0\1\3\2\45\1\0\1\3\1\0\1\3\1\0"+
    "\3\3\2\0\30\45\1\65\3\45\1\0\1\45\1\0"+
    "\1\3\2\45\1\0\1\3\1\0\1\3\1\0\3\3"+
    "\2\0\7\45\1\66\4\45\1\67\17\45\1\0\1\45"+
    "\1\0\1\3\2\45\1\0\1\3\1\0\1\3\1\0"+
    "\3\3\2\0\1\70\33\45\1\0\1\45\1\0\1\3"+
    "\2\45\1\0\1\3\1\0\1\3\1\0\3\3\2\0"+
    "\7\45\1\71\1\45\1\72\22\45\1\0\1\45\1\0"+
    "\1\3\2\45\1\0\1\3\1\0\1\3\1\0\3\3"+
    "\2\0\11\45\1\73\22\45\1\0\1\45\1\0\1\3"+
    "\2\45\1\0\1\3\1\0\1\3\1\0\3\3\2\0"+
    "\6\45\1\74\4\45\1\75\12\45\1\76\5\45\1\0"+
    "\1\45\1\0\1\3\2\45\1\0\1\3\1\0\1\3"+
    "\1\0\3\3\2\0\6\45\1\77\25\45\1\0\1\45"+
    "\1\0\1\3\2\45\1\0\1\3\1\0\1\3\1\0"+
    "\3\3\2\0\7\45\1\100\24\45\1\0\1\45\1\0"+
    "\1\3\2\45\1\0\1\3\1\0\1\3\1\0\3\3"+
    "\2\0\4\45\1\101\4\45\1\102\20\45\1\103\1\45"+
    "\1\0\1\45\1\0\1\3\2\45\1\0\1\3\1\0"+
    "\1\3\1\0\3\3\2\0\22\45\1\104\11\45\1\0"+
    "\1\45\1\0\1\3\2\45\1\0\1\3\1\0\1\3"+
    "\1\0\3\3\2\0\1\105\12\45\1\106\6\45\1\107"+
    "\11\45\1\0\1\45\1\0\1\3\2\45\1\0\1\3"+
    "\1\0\1\3\1\0\3\3\2\0\7\45\1\110\1\45"+
    "\1\111\1\45\1\112\20\45\1\0\1\45\1\0\1\3"+
    "\2\45\1\0\1\3\1\0\1\3\1\0\3\3\2\0"+
    "\6\45\1\113\25\45\1\0\1\45\1\0\1\3\2\45"+
    "\1\0\1\3\1\0\1\3\1\0\3\3\2\0\1\114"+
    "\33\45\1\0\1\45\1\0\1\3\2\45\1\0\1\3"+
    "\1\0\1\3\1\0\3\3\2\0\30\45\1\115\3\45"+
    "\1\0\1\45\1\0\1\3\2\45\1\0\1\3\1\0"+
    "\1\3\1\0\3\3\2\0\3\45\1\116\5\45\1\117"+
    "\22\45\1\0\1\45\1\0\1\3\2\45\1\0\1\3"+
    "\1\0\1\3\1\0\3\3\2\0\7\45\1\120\1\45"+
    "\1\121\22\45\1\0\1\45\1\0\1\3\2\45\1\0"+
    "\1\3\1\0\1\3\1\0\3\3\2\0\22\45\1\122"+
    "\11\45\1\0\1\45\16\0\1\123\5\0\1\124\1\125"+
    "\1\0\1\126\1\0\1\127\6\0\1\130\1\0\1\131"+
    "\1\0\1\132\6\0\1\133\1\0\1\3\2\134\1\0"+
    "\1\3\1\0\1\3\1\0\3\3\2\0\34\134\1\0"+
    "\1\134\1\0\1\3\1\134\1\135\1\0\1\3\1\0"+
    "\1\3\1\47\3\3\2\0\1\134\1\135\32\134\1\0"+
    "\1\134\16\0\1\136\2\0\1\137\1\140\4\0\1\141"+
    "\1\142\1\143\1\0\1\144\1\0\1\145\1\146\1\147"+
    "\1\150\1\0\1\151\33\0\1\152\2\0\1\153\55\0"+
    "\1\154\53\0\1\155\41\0\1\156\53\0\1\157\6\0"+
    "\1\160\21\0\1\161\27\0\1\162\15\0\1\163\30\0"+
    "\1\164\63\0\1\165\43\0\1\166\67\0\1\167\23\0"+
    "\1\3\2\134\1\0\1\3\1\0\1\3\1\0\3\3"+
    "\2\0\11\134\1\170\22\134\1\0\1\134\1\0\1\3"+
    "\2\134\1\0\1\3\1\0\1\3\1\0\3\3\2\0"+
    "\22\134\1\171\11\134\1\0\1\134\1\0\1\3\2\134"+
    "\1\0\1\3\1\0\1\3\1\0\3\3\2\0\7\134"+
    "\1\172\24\134\1\0\1\134\1\0\1\3\2\134\1\0"+
    "\1\3\1\0\1\3\1\0\3\3\2\0\1\173\22\134"+
    "\1\174\10\134\1\0\1\134\1\0\1\3\2\134\1\0"+
    "\1\3\1\0\1\3\1\0\3\3\2\0\17\134\1\175"+
    "\14\134\1\0\1\134\1\0\1\3\2\134\1\0\1\3"+
    "\1\0\1\3\1\0\3\3\2\0\30\134\1\176\3\134"+
    "\1\0\1\134\1\0\1\3\2\134\1\0\1\3\1\0"+
    "\1\3\1\0\3\3\2\0\20\134\1\177\13\134\1\0"+
    "\1\134\1\0\1\3\2\134\1\0\1\3\1\0\1\3"+
    "\1\0\3\3\2\0\5\134\1\200\16\134\1\201\7\134"+
    "\1\0\1\134\1\0\1\3\2\134\1\0\1\3\1\0"+
    "\1\3\1\0\3\3\2\0\15\134\1\202\16\134\1\0"+
    "\1\134\1\0\1\3\2\134\1\0\1\3\1\0\1\3"+
    "\1\0\3\3\2\0\1\203\21\134\1\204\11\134\1\0"+
    "\1\134\1\0\1\3\2\134\1\0\1\3\1\0\1\3"+
    "\1\0\3\3\2\0\10\134\1\205\23\134\1\0\1\134"+
    "\1\0\1\3\2\134\1\0\1\3\1\0\1\3\1\0"+
    "\3\3\2\0\21\134\1\206\12\134\1\0\1\134\1\0"+
    "\1\3\2\134\1\0\1\3\1\0\1\3\1\0\3\3"+
    "\2\0\11\134\1\207\22\134\1\0\1\134\1\0\1\3"+
    "\2\134\1\0\1\3\1\0\1\3\1\0\3\3\2\0"+
    "\6\134\1\210\25\134\1\0\1\134\1\0\1\3\2\134"+
    "\1\0\1\3\1\0\1\3\1\0\3\3\2\0\1\211"+
    "\33\134\1\0\1\134\1\0\1\3\2\134\1\0\1\3"+
    "\1\0\1\3\1\0\3\3\2\0\6\134\1\212\7\134"+
    "\1\213\15\134\1\0\1\134\1\0\1\3\2\134\1\0"+
    "\1\3\1\0\1\3\1\0\3\3\2\0\22\134\1\214"+
    "\11\134\1\0\1\134\1\0\1\3\2\134\1\0\1\3"+
    "\1\0\1\3\1\0\3\3\2\0\30\134\1\215\3\134"+
    "\1\0\1\134\1\0\1\3\2\134\1\0\1\3\1\0"+
    "\1\3\1\0\3\3\2\0\21\134\1\216\12\134\1\0"+
    "\1\134\1\0\1\3\2\134\1\0\1\3\1\0\1\3"+
    "\1\0\3\3\2\0\24\134\1\217\7\134\1\0\1\134"+
    "\1\0\1\3\2\134\1\0\1\3\1\0\1\3\1\0"+
    "\3\3\2\0\21\134\1\220\12\134\1\0\1\134\1\0"+
    "\1\3\2\134\1\0\1\3\1\0\1\3\1\0\3\3"+
    "\2\0\24\134\1\221\7\134\1\0\1\134\1\0\1\3"+
    "\2\134\1\0\1\3\1\0\1\3\1\0\3\3\2\0"+
    "\30\134\1\222\3\134\1\0\1\134\1\0\1\3\2\134"+
    "\1\0\1\3\1\0\1\3\1\0\3\3\2\0\6\134"+
    "\1\223\25\134\1\0\1\134\1\0\1\3\2\134\1\0"+
    "\1\3\1\0\1\3\1\0\3\3\2\0\5\134\1\224"+
    "\23\134\1\225\2\134\1\0\1\134\1\0\1\3\2\134"+
    "\1\0\1\3\1\0\1\3\1\0\3\3\2\0\1\226"+
    "\6\134\1\227\24\134\1\0\1\134\1\0\1\3\2\134"+
    "\1\0\1\3\1\0\1\3\1\0\3\3\2\0\11\134"+
    "\1\230\22\134\1\0\1\134\1\0\1\3\2\134\1\0"+
    "\1\3\1\0\1\3\1\0\3\3\2\0\10\134\1\231"+
    "\23\134\1\0\1\134\1\0\1\3\2\134\1\0\1\3"+
    "\1\0\1\3\1\0\3\3\2\0\10\134\1\232\23\134"+
    "\1\0\1\134\1\0\1\3\2\134\1\0\1\3\1\0"+
    "\1\3\1\0\3\3\2\0\26\134\1\233\5\134\1\0"+
    "\1\134\1\0\1\3\2\134\1\0\1\3\1\0\1\3"+
    "\1\0\3\3\2\0\15\134\1\234\16\134\1\0\1\134"+
    "\16\0\1\235\4\0\1\236\52\0\1\237\47\0\1\240"+
    "\53\0\1\241\53\0\1\242\53\0\1\243\57\0\1\244"+
    "\53\0\1\245\53\0\1\246\32\0\1\3\2\247\1\0"+
    "\1\3\1\0\1\3\1\0\3\3\2\0\34\247\1\0"+
    "\1\247\1\0\1\3\1\247\1\250\1\0\1\3\1\0"+
    "\1\3\1\47\3\3\2\0\1\247\1\250\32\247\1\0"+
    "\1\247\15\0\1\251\60\0\1\252\2\0\1\253\55\0"+
    "\1\254\41\0\1\255\53\0\1\256\6\0\1\257\4\0"+
    "\1\260\46\0\1\261\51\0\1\262\15\0\1\263\30\0"+
    "\1\264\67\0\1\265\47\0\1\266\43\0\1\267\6\0"+
    "\1\270\60\0\1\271\45\0\1\272\46\0\1\273\57\0"+
    "\1\274\46\0\1\275\65\0\1\276\1\0\1\277\37\0"+
    "\1\300\104\0\1\301\35\0\1\302\4\0\1\303\60\0"+
    "\1\304\41\0\1\305\24\0\1\3\2\247\1\0\1\3"+
    "\1\0\1\3\1\0\3\3\2\0\26\247\1\306\5\247"+
    "\1\0\1\247\1\0\1\3\2\247\1\0\1\3\1\0"+
    "\1\3\1\0\3\3\2\0\1\307\33\247\1\0\1\247"+
    "\1\0\1\3\2\247\1\0\1\3\1\0\1\3\1\0"+
    "\3\3\2\0\20\247\1\310\13\247\1\0\1\247\1\0"+
    "\1\3\2\247\1\0\1\3\1\0\1\3\1\0\3\3"+
    "\2\0\6\247\1\311\25\247\1\0\1\247\1\0\1\3"+
    "\2\247\1\0\1\3\1\0\1\3\1\0\3\3\2\0"+
    "\4\247\1\312\27\247\1\0\1\247\1\0\1\3\2\247"+
    "\1\0\1\3\1\0\1\3\1\0\3\3\2\0\7\247"+
    "\1\313\24\247\1\0\1\247\1\0\1\3\2\247\1\0"+
    "\1\3\1\0\1\3\1\0\3\3\2\0\13\247\1\314"+
    "\20\247\1\0\1\247\1\0\1\3\2\247\1\0\1\3"+
    "\1\0\1\3\1\0\3\3\2\0\4\247\1\315\27\247"+
    "\1\0\1\247\1\0\1\3\2\247\1\0\1\3\1\0"+
    "\1\3\1\0\3\3\2\0\7\247\1\316\24\247\1\0"+
    "\1\247\1\0\1\3\2\247\1\0\1\3\1\0\1\3"+
    "\1\0\3\3\2\0\25\247\1\317\6\247\1\0\1\247"+
    "\1\0\1\3\2\247\1\0\1\3\1\0\1\3\1\0"+
    "\3\3\2\0\21\247\1\320\12\247\1\0\1\247\1\0"+
    "\1\3\2\247\1\0\1\3\1\0\1\3\1\0\3\3"+
    "\2\0\21\247\1\321\12\247\1\0\1\247\1\0\1\3"+
    "\2\247\1\0\1\3\1\0\1\3\1\0\3\3\2\0"+
    "\7\247\1\322\24\247\1\0\1\247\1\0\1\3\2\247"+
    "\1\0\1\3\1\0\1\3\1\0\3\3\2\0\14\247"+
    "\1\323\17\247\1\0\1\247\1\0\1\3\2\247\1\0"+
    "\1\3\1\0\1\3\1\0\3\3\2\0\13\247\1\324"+
    "\20\247\1\0\1\247\1\0\1\3\2\247\1\0\1\3"+
    "\1\0\1\3\1\0\3\3\2\0\31\247\1\325\2\247"+
    "\1\0\1\247\1\0\1\3\2\247\1\0\1\3\1\0"+
    "\1\3\1\0\3\3\2\0\6\247\1\326\25\247\1\0"+
    "\1\247\1\0\1\3\2\247\1\0\1\3\1\0\1\3"+
    "\1\0\3\3\2\0\30\247\1\327\3\247\1\0\1\247"+
    "\1\0\1\3\2\247\1\0\1\3\1\0\1\3\1\0"+
    "\3\3\2\0\31\247\1\330\2\247\1\0\1\247\1\0"+
    "\1\3\2\247\1\0\1\3\1\0\1\3\1\0\3\3"+
    "\2\0\7\247\1\331\24\247\1\0\1\247\1\0\1\3"+
    "\2\247\1\0\1\3\1\0\1\3\1\0\3\3\2\0"+
    "\1\332\33\247\1\0\1\247\1\0\1\3\2\247\1\0"+
    "\1\3\1\0\1\3\1\0\3\3\2\0\17\247\1\333"+
    "\14\247\1\0\1\247\1\0\1\3\2\247\1\0\1\3"+
    "\1\0\1\3\1\0\3\3\2\0\7\247\1\334\24\247"+
    "\1\0\1\247\1\0\1\3\2\247\1\0\1\3\1\0"+
    "\1\3\1\0\3\3\2\0\4\247\1\335\27\247\1\0"+
    "\1\247\1\0\1\3\2\247\1\0\1\3\1\0\1\3"+
    "\1\0\3\3\2\0\3\247\1\336\30\247\1\0\1\247"+
    "\1\0\1\3\2\247\1\0\1\3\1\0\1\3\1\0"+
    "\3\3\2\0\4\247\1\337\27\247\1\0\1\247\1\0"+
    "\1\3\2\247\1\0\1\3\1\0\1\3\1\0\3\3"+
    "\2\0\21\247\1\340\12\247\1\0\1\247\1\0\1\3"+
    "\2\247\1\0\1\3\1\0\1\3\1\0\3\3\2\0"+
    "\13\247\1\341\20\247\1\0\1\247\1\0\1\3\2\247"+
    "\1\0\1\3\1\0\1\3\1\0\3\3\2\0\7\247"+
    "\1\342\24\247\1\0\1\247\1\0\1\3\2\247\1\0"+
    "\1\3\1\0\1\3\1\0\3\3\2\0\14\247\1\343"+
    "\17\247\1\0\1\247\1\0\1\3\2\247\1\0\1\3"+
    "\1\0\1\3\1\0\3\3\2\0\14\247\1\344\17\247"+
    "\1\0\1\247\1\0\1\3\2\247\1\0\1\3\1\0"+
    "\1\3\1\0\3\3\2\0\7\247\1\345\24\247\1\0"+
    "\1\247\1\0\1\3\2\247\1\0\1\3\1\0\1\3"+
    "\1\0\3\3\2\0\4\247\1\346\27\247\1\0\1\247"+
    "\1\0\1\3\2\247\1\0\1\3\1\0\1\3\1\0"+
    "\3\3\2\0\4\247\1\347\27\247\1\0\1\247\1\0"+
    "\1\3\2\247\1\0\1\3\1\0\1\3\1\0\3\3"+
    "\2\0\3\247\1\350\30\247\1\0\1\247\1\0\1\3"+
    "\2\247\1\0\1\3\1\0\1\3\1\0\3\3\2\0"+
    "\4\247\1\351\27\247\1\0\1\247\37\0\1\352\51\0"+
    "\1\353\55\0\1\354\53\0\1\355\53\0\1\356\53\0"+
    "\1\357\43\0\1\360\53\0\1\361\25\0\1\3\2\362"+
    "\1\0\1\3\1\0\1\3\1\0\3\3\2\0\34\362"+
    "\1\0\1\362\1\0\1\3\1\362\1\363\1\0\1\3"+
    "\1\0\1\3\1\47\3\3\2\0\1\362\1\363\32\362"+
    "\1\0\1\362\23\0\1\364\46\0\1\365\57\0\1\366"+
    "\60\0\1\367\1\0\1\370\50\0\1\371\42\0\1\372"+
    "\104\0\1\373\35\0\1\374\4\0\1\375\60\0\1\376"+
    "\53\0\1\377\26\0\1\u0100\66\0\1\u0101\47\0\1\u0102"+
    "\55\0\1\u0103\51\0\1\u0104\71\0\1\u0105\50\0\1\u0106"+
    "\43\0\1\u0107\41\0\1\u0108\53\0\1\u0109\60\0\1\u010a"+
    "\77\0\1\u010b\6\0\1\3\2\362\1\0\1\3\1\0"+
    "\1\3\1\0\3\3\2\0\24\362\1\u010c\7\362\1\0"+
    "\1\362\1\0\1\3\2\362\1\0\1\3\1\0\1\3"+
    "\1\0\3\3\2\0\13\362\1\u010d\20\362\1\0\1\362"+
    "\1\0\1\3\2\362\1\0\1\3\1\0\1\3\1\0"+
    "\3\3\2\0\25\362\1\u010e\6\362\1\0\1\362\1\0"+
    "\1\3\2\362\1\0\1\3\1\0\1\3\1\0\3\3"+
    "\2\0\6\362\1\u010f\25\362\1\0\1\362\1\0\1\3"+
    "\2\362\1\0\1\3\1\0\1\3\1\0\3\3\2\0"+
    "\7\362\1\u0110\24\362\1\0\1\362\1\0\1\3\2\362"+
    "\1\0\1\3\1\0\1\3\1\0\3\3\2\0\13\362"+
    "\1\u0111\20\362\1\0\1\362\1\0\1\3\2\362\1\0"+
    "\1\3\1\0\1\3\1\0\3\3\2\0\4\362\1\u0112"+
    "\27\362\1\0\1\362\1\0\1\3\2\362\1\0\1\3"+
    "\1\0\1\3\1\0\3\3\2\0\7\362\1\u0113\24\362"+
    "\1\0\1\362\1\0\1\3\2\362\1\0\1\3\1\0"+
    "\1\3\1\0\3\3\2\0\30\362\1\u0114\3\362\1\0"+
    "\1\362\1\0\1\3\2\362\1\0\1\3\1\0\1\3"+
    "\1\0\3\3\2\0\6\362\1\u0115\25\362\1\0\1\362"+
    "\1\0\1\3\2\362\1\0\1\3\1\0\1\3\1\0"+
    "\3\3\2\0\15\362\1\u0116\16\362\1\0\1\362\1\0"+
    "\1\3\2\362\1\0\1\3\1\0\1\3\1\0\3\3"+
    "\2\0\7\362\1\u0117\24\362\1\0\1\362\1\0\1\3"+
    "\2\362\1\0\1\3\1\0\1\3\1\0\3\3\2\0"+
    "\6\362\1\u0118\25\362\1\0\1\362\1\0\1\3\2\362"+
    "\1\0\1\3\1\0\1\3\1\0\3\3\2\0\30\362"+
    "\1\u0119\3\362\1\0\1\362\1\0\1\3\2\362\1\0"+
    "\1\3\1\0\1\3\1\0\3\3\2\0\24\362\1\u011a"+
    "\7\362\1\0\1\362\1\0\1\3\2\362\1\0\1\3"+
    "\1\0\1\3\1\0\3\3\2\0\7\362\1\u011b\24\362"+
    "\1\0\1\362\1\0\1\3\2\362\1\0\1\3\1\0"+
    "\1\3\1\0\3\3\2\0\3\362\1\u011c\30\362\1\0"+
    "\1\362\1\0\1\3\2\362\1\0\1\3\1\0\1\3"+
    "\1\0\3\3\2\0\4\362\1\u011d\27\362\1\0\1\362"+
    "\1\0\1\3\2\362\1\0\1\3\1\0\1\3\1\0"+
    "\3\3\2\0\11\362\1\u011e\22\362\1\0\1\362\40\0"+
    "\1\u011f\53\0\1\u0120\53\0\1\u0121\53\0\1\u0122\53\0"+
    "\1\u0123\37\0\1\u0124\53\0\1\u0125\30\0\1\3\2\u0126"+
    "\1\0\1\3\1\0\1\3\1\0\3\3\2\0\34\u0126"+
    "\1\0\1\u0126\1\0\1\3\1\u0126\1\u0127\1\0\1\3"+
    "\1\0\1\3\1\47\3\3\2\0\1\u0126\1\u0127\32\u0126"+
    "\1\0\1\u0126\24\0\1\u0128\55\0\1\u0129\51\0\1\u012a"+
    "\71\0\1\u012b\50\0\1\u012c\46\0\1\u012d\50\0\1\u012e"+
    "\41\0\1\u012f\53\0\1\u0130\60\0\1\u0131\53\0\1\u0132"+
    "\77\0\1\u0133\22\0\1\u0134\53\0\1\u0135\63\0\1\u0136"+
    "\71\0\1\u0137\53\0\1\u0138\53\0\1\u0139\35\0\1\u013a"+
    "\43\0\1\u013b\37\0\1\3\2\u0126\1\0\1\3\1\0"+
    "\1\3\1\0\3\3\2\0\24\u0126\1\u013c\7\u0126\1\0"+
    "\1\u0126\1\0\1\3\2\u0126\1\0\1\3\1\0\1\3"+
    "\1\0\3\3\2\0\13\u0126\1\u013d\20\u0126\1\0\1\u0126"+
    "\1\0\1\3\2\u0126\1\0\1\3\1\0\1\3\1\0"+
    "\3\3\2\0\27\u0126\1\u013e\4\u0126\1\0\1\u0126\1\0"+
    "\1\3\2\u0126\1\0\1\3\1\0\1\3\1\0\3\3"+
    "\2\0\30\u0126\1\u013f\3\u0126\1\0\1\u0126\1\0\1\3"+
    "\2\u0126\1\0\1\3\1\0\1\3\1\0\3\3\2\0"+
    "\7\u0126\1\u0140\24\u0126\1\0\1\u0126\1\0\1\3\2\u0126"+
    "\1\0\1\3\1\0\1\3\1\0\3\3\2\0\7\u0126"+
    "\1\u0141\24\u0126\1\0\1\u0126\1\0\1\3\2\u0126\1\0"+
    "\1\3\1\0\1\3\1\0\3\3\2\0\11\u0126\1\u0142"+
    "\22\u0126\1\0\1\u0126\1\0\1\3\2\u0126\1\0\1\3"+
    "\1\0\1\3\1\0\3\3\2\0\30\u0126\1\u0143\3\u0126"+
    "\1\0\1\u0126\1\0\1\3\2\u0126\1\0\1\3\1\0"+
    "\1\3\1\0\3\3\2\0\7\u0126\1\u0144\24\u0126\1\0"+
    "\1\u0126\1\0\1\3\2\u0126\1\0\1\3\1\0\1\3"+
    "\1\0\3\3\2\0\20\u0126\1\u0145\13\u0126\1\0\1\u0126"+
    "\22\0\1\u0146\53\0\1\u0147\53\0\1\u0148\53\0\1\u0149"+
    "\53\0\1\u014a\57\0\1\u014b\53\0\1\u014c\26\0\1\3"+
    "\2\u014d\1\0\1\3\1\0\1\3\1\0\3\3\2\0"+
    "\34\u014d\1\0\1\u014d\1\0\1\3\1\u014d\1\u0127\1\0"+
    "\1\3\1\0\1\3\1\47\3\3\2\0\1\u014d\1\u0127"+
    "\32\u014d\1\0\1\u014d\15\0\1\u014e\53\0\1\u014f\63\0"+
    "\1\u0150\71\0\1\u0151\53\0\1\u0152\25\0\1\u0153\101\0"+
    "\1\u0154\25\0\1\u0155\63\0\1\u0156\43\0\1\u0157\53\0"+
    "\1\u0158\53\0\1\u0159\106\0\1\u015a\30\0\1\u015b\74\0"+
    "\1\u015c\6\0\1\3\2\u014d\1\0\1\3\1\0\1\3"+
    "\1\0\3\3\2\0\30\u014d\1\u015d\3\u014d\1\0\1\u014d"+
    "\1\0\1\3\2\u014d\1\0\1\3\1\0\1\3\1\0"+
    "\3\3\2\0\1\u015e\33\u014d\1\0\1\u014d\1\0\1\3"+
    "\2\u014d\1\0\1\3\1\0\1\3\1\0\3\3\2\0"+
    "\11\u014d\1\u015f\22\u014d\1\0\1\u014d\25\0\1\u0160\53\0"+
    "\1\u0161\53\0\1\u0162\53\0\1\u0163\53\0\1\u0164\53\0"+
    "\1\u0165\53\0\1\u0166\43\0\1\u0167\53\0\1\u0168\106\0"+
    "\1\u0169\30\0\1\u016a\74\0\1\u016b\45\0\1\u016c\30\0"+
    "\1\u016d\53\0\1\u016e\37\0\1\3\2\u014d\1\0\1\3"+
    "\1\0\1\3\1\0\3\3\2\0\7\u014d\1\u016f\24\u014d"+
    "\1\0\1\u014d\40\0\1\u0170\30\0\1\u0171\53\0\1\u0172"+
    "\67\0\1\u0173\23\0\1\3\2\u014d\1\0\1\3\1\0"+
    "\1\3\1\0\3\3\2\0\10\u014d\1\u0174\23\u014d\1\0"+
    "\1\u014d\31\0\1\u0175\44\0\1\u0176\53\0\1\u0177\56\0"+
    "\1\u0178\53\0\1\u0179\43\0\1\u017a\53\0\1\u017b\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12496];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\1\1\1\11\5\1\1\11"+
    "\30\1\1\11\13\0\40\1\11\0\2\1\20\0\2\11"+
    "\4\0\1\11\1\0\1\11\1\0\45\1\2\0\1\11"+
    "\5\0\1\11\1\0\2\1\1\11\3\0\2\11\5\0"+
    "\1\11\2\0\1\11\5\0\1\11\2\0\1\11\5\0"+
    "\44\1\1\0\1\11\6\0\2\1\6\0\1\11\5\0"+
    "\1\11\7\0\2\11\2\0\23\1\7\0\2\1\7\0"+
    "\2\11\3\0\2\11\5\0\1\11\12\1\7\0\1\1"+
    "\2\11\3\0\1\11\1\0\1\11\1\0\3\11\3\0"+
    "\3\1\11\11\4\0\2\11\1\1\1\0\2\11\1\0"+
    "\1\1\5\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[379];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

  StringBuilder string = new StringBuilder();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }

  private void error(String message) {
    ErrorI.addError(new ErrorI(yyline+1,yycolumn+1,"Simbolo " + message + " no reconocido para la gramatica lexica de HTML",MainFrame.currentFile,'a'));
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_HTML(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { error(yytext());
            } 
            // fall through
          case 104: break;
          case 2: 
            { return symbol(TEXTO,yytext());
            } 
            // fall through
          case 105: break;
          case 3: 
            { return symbol(TAG,yytext());
            } 
            // fall through
          case 106: break;
          case 4: 
            { return symbol(NUMERO,yytext());
            } 
            // fall through
          case 107: break;
          case 5: 
            { 
            } 
            // fall through
          case 108: break;
          case 6: 
            { return symbol(SIGNO_GATO,yytext());
            } 
            // fall through
          case 109: break;
          case 7: 
            { return symbol(COMILLA,yytext());
            } 
            // fall through
          case 110: break;
          case 8: 
            { return symbol(IGUAL,yytext());
            } 
            // fall through
          case 111: break;
          case 9: 
            { return symbol(DIAGONAL,yytext());
            } 
            // fall through
          case 112: break;
          case 10: 
            { return symbol(CABIERTO,yytext());
            } 
            // fall through
          case 113: break;
          case 11: 
            { return symbol(CCERRADO,yytext());
            } 
            // fall through
          case 114: break;
          case 12: 
            { return symbol(APERTURA,yytext());
            } 
            // fall through
          case 115: break;
          case 13: 
            { return symbol(CIERRE,yytext());
            } 
            // fall through
          case 116: break;
          case 14: 
            { return symbol(OREF,yytext());
            } 
            // fall through
          case 117: break;
          case 15: 
            { return symbol(TIPO,yytext());
            } 
            // fall through
          case 118: break;
          case 16: 
            { return symbol(PARAGRAPH,yytext());
            } 
            // fall through
          case 119: break;
          case 17: 
            { return symbol(PORCENTAJE,yytext());
            } 
            // fall through
          case 120: break;
          case 18: 
            { return symbol(HR,yytext());
            } 
            // fall through
          case 121: break;
          case 19: 
            { return symbol(OL,yytext());
            } 
            // fall through
          case 122: break;
          case 20: 
            { return symbol(UL,yytext());
            } 
            // fall through
          case 123: break;
          case 21: 
            { return symbol(OITALIC,yytext());
            } 
            // fall through
          case 124: break;
          case 22: 
            { return symbol(OBOLD,yytext());
            } 
            // fall through
          case 125: break;
          case 23: 
            { return symbol(PAR,yytext());
            } 
            // fall through
          case 126: break;
          case 24: 
            { return symbol(OSUBRA,yytext());
            } 
            // fall through
          case 127: break;
          case 25: 
            { return symbol(RED,yytext());
            } 
            // fall through
          case 128: break;
          case 26: 
            { return symbol(LT,"<");
            } 
            // fall through
          case 129: break;
          case 27: 
            { return symbol(GT,">");
            } 
            // fall through
          case 130: break;
          case 28: 
            { return symbol(CREF,yytext());
            } 
            // fall through
          case 131: break;
          case 29: 
            { return symbol(CITALIC,yytext());
            } 
            // fall through
          case 132: break;
          case 30: 
            { return symbol(CBOLD,yytext());
            } 
            // fall through
          case 133: break;
          case 31: 
            { return symbol(CP,yytext());
            } 
            // fall through
          case 134: break;
          case 32: 
            { return symbol(CSUBRA,yytext());
            } 
            // fall through
          case 135: break;
          case 33: 
            { return symbol(LI,yytext());
            } 
            // fall through
          case 136: break;
          case 34: 
            { return symbol(BR,yytext());
            } 
            // fall through
          case 137: break;
          case 35: 
            { return symbol(AQUA,yytext());
            } 
            // fall through
          case 138: break;
          case 36: 
            { return symbol(HREF,yytext());
            } 
            // fall through
          case 139: break;
          case 37: 
            { return symbol(TEAL,yytext());
            } 
            // fall through
          case 140: break;
          case 38: 
            { return symbol(TEXT,yytext());
            } 
            // fall through
          case 141: break;
          case 39: 
            { return symbol(TYPE,yytext());
            } 
            // fall through
          case 142: break;
          case 40: 
            { return symbol(LEFT,yytext());
            } 
            // fall through
          case 143: break;
          case 41: 
            { return symbol(LIME,yytext());
            } 
            // fall through
          case 144: break;
          case 42: 
            { return symbol(LINK,yytext());
            } 
            // fall through
          case 145: break;
          case 43: 
            { return symbol(DISC,yytext());
            } 
            // fall through
          case 146: break;
          case 44: 
            { return symbol(BLUE,yytext());
            } 
            // fall through
          case 147: break;
          case 45: 
            { return symbol(BODY,yytext());
            } 
            // fall through
          case 148: break;
          case 46: 
            { return symbol(SIZE,yytext());
            } 
            // fall through
          case 149: break;
          case 47: 
            { return symbol(FACE,yytext());
            } 
            // fall through
          case 150: break;
          case 48: 
            { return symbol(FONT,yytext());
            } 
            // fall through
          case 151: break;
          case 49: 
            { return symbol(NAME,yytext());
            } 
            // fall through
          case 152: break;
          case 50: 
            { return symbol(NAVY,yytext());
            } 
            // fall through
          case 153: break;
          case 51: 
            { return symbol(GRAY,yytext());
            } 
            // fall through
          case 154: break;
          case 52: 
            { return symbol(AMP,"&");
            } 
            // fall through
          case 155: break;
          case 53: 
            { return symbol(COL,yytext());
            } 
            // fall through
          case 156: break;
          case 54: 
            { return symbol(CUL,yytext());
            } 
            // fall through
          case 157: break;
          case 55: 
            { return symbol(OSUB,yytext());
            } 
            // fall through
          case 158: break;
          case 56: 
            { return symbol(OSUP,yytext());
            } 
            // fall through
          case 159: break;
          case 57: 
            { return symbol(ALIGN,yytext());
            } 
            // fall through
          case 160: break;
          case 58: 
            { return symbol(BLACK,yytext());
            } 
            // fall through
          case 161: break;
          case 59: 
            { return symbol(OLIVE,yytext());
            } 
            // fall through
          case 162: break;
          case 60: 
            { return symbol(START,yytext());
            } 
            // fall through
          case 163: break;
          case 61: 
            { return symbol(COLOR,yytext());
            } 
            // fall through
          case 164: break;
          case 62: 
            { return symbol(GREEN,yytext());
            } 
            // fall through
          case 165: break;
          case 63: 
            { return symbol(WHITE,yytext());
            } 
            // fall through
          case 166: break;
          case 64: 
            { return symbol(WIDTH,yytext());
            } 
            // fall through
          case 167: break;
          case 65: 
            { return symbol(RIGHT,yytext());
            } 
            // fall through
          case 168: break;
          case 66: 
            { return symbol(HEXADECIMAL,yytext());
            } 
            // fall through
          case 169: break;
          case 67: 
            { return symbol(CSUB,yytext());
            } 
            // fall through
          case 170: break;
          case 68: 
            { return symbol(CSUP,yytext());
            } 
            // fall through
          case 171: break;
          case 69: 
            { return symbol(OHTML,yytext());
            } 
            // fall through
          case 172: break;
          case 70: 
            { return symbol(OHEAD,yytext());
            } 
            // fall through
          case 173: break;
          case 71: 
            { return symbol(ONOBR,yytext());
            } 
            // fall through
          case 174: break;
          case 72: 
            { return symbol(MAROON,yytext());
            } 
            // fall through
          case 175: break;
          case 73: 
            { return symbol(YELLOW,yytext());
            } 
            // fall through
          case 176: break;
          case 74: 
            { return symbol(SILVER,yytext());
            } 
            // fall through
          case 177: break;
          case 75: 
            { return symbol(SQUARE,yytext());
            } 
            // fall through
          case 178: break;
          case 76: 
            { return symbol(PURPLE,yytext());
            } 
            // fall through
          case 179: break;
          case 77: 
            { return symbol(CENTER,yytext());
            } 
            // fall through
          case 180: break;
          case 78: 
            { return symbol(CIRCLE,yytext());
            } 
            // fall through
          case 181: break;
          case 79: 
            { return symbol(CHTML,yytext());
            } 
            // fall through
          case 182: break;
          case 80: 
            { return symbol(CHEAD,yytext());
            } 
            // fall through
          case 183: break;
          case 81: 
            { return symbol(CBODY  ,yytext());
            } 
            // fall through
          case 184: break;
          case 82: 
            { return symbol(CFONT,yytext());
            } 
            // fall through
          case 185: break;
          case 83: 
            { return symbol(CNOBR,yytext());
            } 
            // fall through
          case 186: break;
          case 84: 
            { return symbol(OTITLE,yytext());
            } 
            // fall through
          case 187: break;
          case 85: 
            { return symbol(OBLINK,yytext());
            } 
            // fall through
          case 188: break;
          case 86: 
            { return symbol(BGCOLOR,yytext());
            } 
            // fall through
          case 189: break;
          case 87: 
            { return symbol(FUCHSIA,yytext());
            } 
            // fall through
          case 190: break;
          case 88: 
            { return symbol(AACUTE,"á");
            } 
            // fall through
          case 191: break;
          case 89: 
            { return symbol(EACUTE,"é");
            } 
            // fall through
          case 192: break;
          case 90: 
            { return symbol(IACUTE,"í");
            } 
            // fall through
          case 193: break;
          case 91: 
            { return symbol(OACUTE,"ó");
            } 
            // fall through
          case 194: break;
          case 92: 
            { return symbol(UACUTE,"ú");
            } 
            // fall through
          case 195: break;
          case 93: 
            { return symbol(NTILDEMIN,"ñ");
            } 
            // fall through
          case 196: break;
          case 94: 
            { return symbol(NTILDEMAY,"Ñ");
            } 
            // fall through
          case 197: break;
          case 95: 
            { return symbol(CTITLE  ,yytext());
            } 
            // fall through
          case 198: break;
          case 96: 
            { return symbol(CBLINK,yytext());
            } 
            // fall through
          case 199: break;
          case 97: 
            { return symbol(OSTRIKE,yytext());
            } 
            // fall through
          case 200: break;
          case 98: 
            { return symbol(OCENTER,yytext());
            } 
            // fall through
          case 201: break;
          case 99: 
            { return symbol(CSTRIKE,yytext());
            } 
            // fall through
          case 202: break;
          case 100: 
            { return symbol(CCENTER,yytext());
            } 
            // fall through
          case 203: break;
          case 101: 
            { return symbol(JUSTIFIED,yytext());
            } 
            // fall through
          case 204: break;
          case 102: 
            { return symbol(OBLOCKQUOTE,yytext());
            } 
            // fall through
          case 205: break;
          case 103: 
            { return symbol(CBLOCKQUOTE,yytext());
            } 
            // fall through
          case 206: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Analizador_HTML [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Analizador_HTML scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Analizador_HTML(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
