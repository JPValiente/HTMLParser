
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri May 24 00:21:22 CST 2019
//----------------------------------------------------

package Parser.EmbedCode;

import Backend.EmbedCode.Action;
import Backend.EmbedCode.DefineVariable;
import Backend.EmbedCode.For;
import Backend.EmbedCode.If;
import Backend.EmbedCode.Print;
import Backend.EmbedCode.VariableManipulator;
import Backend.EmbedCode.While;
import Backend.SymbolTable.SymbolTable;
import Backend.Objects.ErrorI;
import Frontend.VariableTable;
import Frontend.MainFrame;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import javax.swing.text.html.HTMLEditorKit.Parser;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri May 24 00:21:22 CST 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\004\000\002\002\002\000\002\002" +
    "\005\000\002\025\002\000\002\025\004\000\002\003\007" +
    "\000\002\003\003\000\002\021\006\000\002\022\003\000" +
    "\002\022\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\003" +
    "\000\002\006\004\000\002\006\005\000\002\006\002\000" +
    "\002\007\003\000\002\007\003\000\002\010\005\000\002" +
    "\011\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\003\003\000\002\013\011\000\002\026\003\000" +
    "\002\026\003\000\002\015\002\000\002\015\004\000\002" +
    "\014\010\000\002\003\003\000\002\016\006\000\002\017" +
    "\003\000\002\003\003\000\002\020\007\000\002\003\003" +
    "\000\002\023\007\000\002\024\003\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\006\002\000\004\005\001\002\000\004\002" +
    "\126\001\002\000\020\005\ufffe\006\ufffe\010\ufffe\032\ufffe" +
    "\035\ufffe\036\ufffe\042\ufffe\001\002\000\020\005\014\006" +
    "\015\010\022\032\016\035\011\036\012\042\020\001\002" +
    "\000\022\005\uffda\006\uffda\010\uffda\032\uffda\035\uffda\036" +
    "\uffda\042\uffda\047\uffda\001\002\000\022\005\uffe1\006\uffe1" +
    "\010\uffe1\032\uffe1\035\uffe1\036\uffe1\042\uffe1\047\uffe1\001" +
    "\002\000\004\010\122\001\002\000\004\010\022\001\002" +
    "\000\022\005\uffd5\006\uffd5\010\uffd5\032\uffd5\035\uffd5\036" +
    "\uffd5\042\uffd5\047\uffd5\001\002\000\004\002\uffff\001\002" +
    "\000\004\010\107\001\002\000\004\010\060\001\002\000" +
    "\022\005\ufffb\006\ufffb\010\ufffb\032\ufffb\035\ufffb\036\ufffb" +
    "\042\ufffb\047\ufffb\001\002\000\004\043\047\001\002\000" +
    "\022\005\ufffd\006\ufffd\010\ufffd\032\ufffd\035\ufffd\036\ufffd" +
    "\042\ufffd\047\ufffd\001\002\000\004\012\024\001\002\000" +
    "\022\005\uffd7\006\uffd7\010\uffd7\032\uffd7\035\uffd7\036\uffd7" +
    "\042\uffd7\047\uffd7\001\002\000\012\010\031\011\025\024" +
    "\026\043\030\001\002\000\032\010\uffd3\011\uffd3\016\uffd3" +
    "\017\uffd3\020\uffd3\021\uffd3\024\uffd3\025\uffd3\033\uffd3\040" +
    "\uffd3\044\uffd3\045\uffd3\001\002\000\006\025\ufff8\040\ufff8" +
    "\001\002\000\022\016\uffef\017\uffef\020\uffef\021\uffef\025" +
    "\uffef\033\uffef\040\uffef\044\uffef\001\002\000\010\010\031" +
    "\011\025\043\030\001\002\000\032\010\uffd2\011\uffd2\016" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\024\uffd2\025\uffd2\033\uffd2" +
    "\040\uffd2\044\uffd2\045\uffd2\001\002\000\004\025\044\001" +
    "\002\000\016\016\034\017\036\020\035\021\037\025\ufff9" +
    "\040\ufff9\001\002\000\010\010\031\011\025\043\030\001" +
    "\002\000\010\010\031\011\025\043\030\001\002\000\010" +
    "\010\031\011\025\043\030\001\002\000\010\010\031\011" +
    "\025\043\030\001\002\000\022\016\ufff0\017\ufff0\020\ufff0" +
    "\021\ufff0\025\ufff0\033\ufff0\040\ufff0\044\ufff0\001\002\000" +
    "\022\016\ufff1\017\ufff1\020\035\021\037\025\ufff1\033\ufff1" +
    "\040\ufff1\044\ufff1\001\002\000\022\016\ufff2\017\ufff2\020" +
    "\ufff2\021\ufff2\025\ufff2\033\ufff2\040\ufff2\044\ufff2\001\002" +
    "\000\022\016\ufff4\017\ufff4\020\035\021\037\025\ufff4\033" +
    "\ufff4\040\ufff4\044\ufff4\001\002\000\024\005\ufffa\006\ufffa" +
    "\010\ufffa\032\ufffa\035\ufffa\036\ufffa\037\ufffa\042\ufffa\047" +
    "\ufffa\001\002\000\014\016\034\017\036\020\035\021\037" +
    "\044\046\001\002\000\022\016\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\025\ufff3\033\ufff3\040\ufff3\044\ufff3\001\002\000\014" +
    "\010\uffec\011\uffec\024\uffec\044\uffec\045\uffec\001\002\000" +
    "\014\010\031\011\025\024\053\044\uffd8\045\054\001\002" +
    "\000\004\044\052\001\002\000\022\005\uffd9\006\uffd9\010" +
    "\uffd9\032\uffd9\035\uffd9\036\uffd9\042\uffd9\047\uffd9\001\002" +
    "\000\014\010\uffeb\011\uffeb\024\uffeb\044\uffeb\045\uffeb\001" +
    "\002\000\010\010\031\011\025\024\053\001\002\000\014" +
    "\010\uffea\011\uffea\024\uffea\044\uffea\045\uffea\001\002\000" +
    "\014\010\uffee\011\uffee\024\uffee\044\uffee\045\uffee\001\002" +
    "\000\014\010\uffed\011\uffed\024\uffed\044\uffed\045\uffed\001" +
    "\002\000\016\022\065\023\066\026\061\027\062\030\063" +
    "\031\064\001\002\000\012\010\uffe5\011\uffe5\024\uffe5\043" +
    "\uffe5\001\002\000\012\010\uffe4\011\uffe4\024\uffe4\043\uffe4" +
    "\001\002\000\012\010\uffe3\011\uffe3\024\uffe3\043\uffe3\001" +
    "\002\000\012\010\uffe2\011\uffe2\024\uffe2\043\uffe2\001\002" +
    "\000\012\010\uffe7\011\uffe7\024\uffe7\043\uffe7\001\002\000" +
    "\012\010\uffe6\011\uffe6\024\uffe6\043\uffe6\001\002\000\012" +
    "\010\031\011\025\024\070\043\030\001\002\000\004\033" +
    "\uffde\001\002\000\004\033\uffdf\001\002\000\004\033\074" +
    "\001\002\000\016\016\034\017\036\020\035\021\037\033" +
    "\uffe8\040\uffe8\001\002\000\004\040\075\001\002\000\004" +
    "\046\102\001\002\000\024\005\uffdd\006\uffdd\010\uffdd\032" +
    "\uffdd\034\077\035\uffdd\036\uffdd\042\uffdd\047\uffdd\001\002" +
    "\000\004\040\075\001\002\000\022\005\uffe0\006\uffe0\010" +
    "\uffe0\032\uffe0\035\uffe0\036\uffe0\042\uffe0\047\uffe0\001\002" +
    "\000\022\005\uffdc\006\uffdc\010\uffdc\032\uffdc\035\uffdc\036" +
    "\uffdc\042\uffdc\047\uffdc\001\002\000\020\006\ufffe\010\ufffe" +
    "\032\ufffe\035\ufffe\036\ufffe\042\ufffe\047\ufffe\001\002\000" +
    "\020\006\015\010\022\032\016\035\011\036\012\042\020" +
    "\047\104\001\002\000\004\041\105\001\002\000\004\025" +
    "\106\001\002\000\024\005\uffdb\006\uffdb\010\uffdb\032\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\042\uffdb\047\uffdb\001\002\000" +
    "\004\007\110\001\002\000\010\013\111\014\113\015\112" +
    "\001\002\000\004\025\ufff7\001\002\000\004\025\ufff5\001" +
    "\002\000\004\025\ufff6\001\002\000\004\025\115\001\002" +
    "\000\022\005\ufffc\006\ufffc\010\ufffc\032\ufffc\035\ufffc\036" +
    "\ufffc\042\ufffc\047\ufffc\001\002\000\004\037\117\001\002" +
    "\000\012\010\031\011\025\024\026\043\030\001\002\000" +
    "\004\040\075\001\002\000\022\005\uffd6\006\uffd6\010\uffd6" +
    "\032\uffd6\035\uffd6\036\uffd6\042\uffd6\047\uffd6\001\002\000" +
    "\016\022\065\023\066\026\061\027\062\030\063\031\064" +
    "\001\002\000\010\010\031\011\025\043\030\001\002\000" +
    "\004\040\075\001\002\000\022\005\uffd4\006\uffd4\010\uffd4" +
    "\032\uffd4\035\uffd4\036\uffd4\042\uffd4\047\uffd4\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\025\005\001\001\000\016\003\020\013\007\016\006" +
    "\020\022\021\016\023\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\032\022\031\024\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\044\024\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\042\024\026\001\001\000\006\005\041\024" +
    "\026\001\001\000\006\005\040\024\026\001\001\000\006" +
    "\005\037\024\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\047\017" +
    "\050\001\001\000\006\007\055\024\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\056\024\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\072\011" +
    "\070\024\026\026\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\075\001\001\000\002\001\001\000\004\015\077\001\001" +
    "\000\004\014\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\102\001\001\000\016\003\020\013\007" +
    "\016\006\020\022\021\016\023\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\032\022\117\024\026\001" +
    "\001\000\004\014\120\001\001\000\002\001\001\000\004" +
    "\012\122\001\001\000\010\005\072\011\123\024\026\001" +
    "\001\000\004\014\124\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	// Connect this parser to a scanner!


	public parser(Analizador_EmbedCode lex) {
		super(lex);
	}

        public void syntax_error(Symbol cur_token) {
					System.out.println("Error Sintactico en linea "+(cur_token.left)+", columna "+(cur_token.right)+" Con el token: "+(cur_token.value)+"\n");
					ErrorI.addError(new ErrorI((cur_token.left),(cur_token.right),"El token " + cur_token.value + " no esta reconocido en la gramatica sintactica",MainFrame.currentFile,'b'));
        }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // nuevosTipos ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int R1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object R1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = SymbolTable.getSymbolValue(R1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevosTipos",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // nuevosTipos ::= NUMERO 
            {
              Object RESULT =null;
		int R1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object R1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Integer.parseInt(R1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevosTipos",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cicloWhile ::= WHILE IDENTIFICADOR tipoSimbolo tipoRelacion bloque 
            {
              Object RESULT =null;
		int C1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object C1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object C2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int C3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int C3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object C3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int W2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int W2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object W2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new While((List<Action>)W2,C1,C2.toString(),C3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloWhile",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // s1 ::= cicloWhile 
            {
              Object RESULT =null;
		int O1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int O1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object O1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
System.out.println(((While)O1));
RESULT = (While)O1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cicloFor ::= FOR definicion TO tipoDefinicion bloque 
            {
              Object RESULT =null;
		int F1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object F1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object F2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int F3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int F3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object F3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println(((VariableManipulator)F1).getNewValor());
System.out.println("Por que estoy aqui ._.");
RESULT = new For((List<Action>)F3,((VariableManipulator)F1).getVar(),Integer.parseInt(F2.toString()),((VariableManipulator)F1).getNewValor());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloFor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // s1 ::= cicloFor 
            {
              Object RESULT =null;
		int F1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object F1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (For)F1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // contenido ::= conc 
            {
              Object RESULT =null;
		int P1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int P1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object P1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = P1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenido",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // print ::= PRINT PABIERTO contenido PCERRADO 
            {
              Object RESULT =null;
		int P1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int P1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object P1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Print(P1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // s1 ::= print 
            {
              Object RESULT =null;
		int P2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int P2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object P2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (Print)P2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // bloque ::= BEGIN CABIERTO s10 CCERRADO END PUNTOYCOMA 
            {
              Object RESULT =null;
		int A1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object A1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = (List<Action>)A1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // elseCondicional ::= ELSE bloque 
            {
              Object RESULT =null;
		int C1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object C1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (List<Action>)C1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseCondicional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // elseCondicional ::= 
            {
              Object RESULT =null;
		List<Action> acciones = new ArrayList<>(); RESULT = (List<Action>)acciones;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseCondicional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // asd ::= TEXTO 
            {
              Object RESULT =null;
		int C1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object C1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = C1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asd",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // asd ::= tipoRelacion 
            {
              Object RESULT =null;
		int C1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object C1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = C1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asd",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condicional ::= IF IDENTIFICADOR tipoSimbolo asd THEN bloque elseCondicional 
            {
              Object RESULT =null;
		int C1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object C1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object C2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int C3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int C3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object C3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int C4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int C4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object C4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int C5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int C5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object C5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		boolean hasElse = false;
System.out.println("Prueba "+C5);
if(((List<Action>)C5).isEmpty()){hasElse = true;};
RESULT = new If(((List<Action>)C4),C1.toString(),C2.toString(),C3,hasElse,(List<Action>)C5);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // s1 ::= condicional 
            {
              Object RESULT =null;
		int L2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int L2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object L2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (If)L2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipoSimbolo ::= DIFERENTE 
            {
              Object RESULT =null;
		int S1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object S1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = S1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSimbolo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipoSimbolo ::= IGUAL 
            {
              Object RESULT =null;
		int S1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object S1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = S1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSimbolo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipoSimbolo ::= MAYORIGUAL 
            {
              Object RESULT =null;
		int S1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object S1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = S1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSimbolo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipoSimbolo ::= MENORIGUAL 
            {
              Object RESULT =null;
		int S1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object S1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = S1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSimbolo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipoSimbolo ::= MAYOR 
            {
              Object RESULT =null;
		int S1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object S1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = S1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSimbolo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipoSimbolo ::= MENOR 
            {
              Object RESULT =null;
		int S1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object S1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = S1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSimbolo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipoRelacion ::= e 
            {
              Object RESULT =null;
		int R1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object R1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = R1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRelacion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // condicion ::= tipoRelacion tipoSimbolo tipoRelacion 
            {
              Object RESULT =null;
		int C1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object C1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object C2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int C3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int C3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object C3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipoConc ::= nuevosTipos 
            {
              Object RESULT =null;
		int C1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object C1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = C1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoConc",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipoConc ::= TEXTO 
            {
              Object RESULT =null;
		int C1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object C1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = C1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoConc",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // conc ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conc",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // conc ::= conc COMA tipoConc 
            {
              Object RESULT =null;
		int C1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object C1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ","+C1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conc",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // conc ::= conc tipoConc 
            {
              Object RESULT =null;
		int C1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object C1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = C1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conc",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // e ::= nuevosTipos 
            {
              Object RESULT =null;
		int R4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int R4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object R4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = R4.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // e ::= e DIV e 
            {
              Object RESULT =null;
		int R2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int R2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object R2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int R3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int R3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object R3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (Float.parseFloat(R2.toString()) / Float.parseFloat(R3.toString())) + "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // e ::= e MENOS e 
            {
              Object RESULT =null;
		int R2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int R2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object R2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int R3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int R3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object R3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (Float.parseFloat(R2.toString()) * Float.parseFloat(R3.toString())) + "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // e ::= e MUX e 
            {
              Object RESULT =null;
		int R2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int R2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object R2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int R3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int R3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object R3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (Float.parseFloat(R2.toString()) - Float.parseFloat(R3.toString())) + "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // e ::= PABIERTO e PCERRADO 
            {
              Object RESULT =null;
		int P1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int P1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object P1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int R2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int R2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object R2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int P2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int P2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object P2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Float.parseFloat(R2.toString()) + "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // e ::= e MAS e 
            {
              Object RESULT =null;
		int R2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int R2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object R2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int R3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int R3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object R3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (Float.parseFloat(R2.toString()) + Float.parseFloat(R3.toString())) + "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipoVariable ::= STRING 
            {
              Object RESULT =null;
		int B1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int B1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object B1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "STRING";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipoVariable ::= BOOLEAN 
            {
              Object RESULT =null;
		int B1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int B1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object B1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "BOOLEAN";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipoVariable ::= INTEGER 
            {
              Object RESULT =null;
		int B1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int B1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object B1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "INTEGER";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipoDefinicion ::= TEXTO 
            {
              Object RESULT =null;
		int I1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object I1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = I1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDefinicion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipoDefinicion ::= e 
            {
              Object RESULT =null;
		int I1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object I1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = I1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDefinicion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // definicion ::= IDENTIFICADOR DEFINICION tipoDefinicion PUNTOYCOMA 
            {
              Object RESULT =null;
		int I1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object I1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int I2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int I2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object I2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new VariableManipulator(I1.toString(),I2,true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // s1 ::= definicion 
            {
              Object RESULT =null;
		int D1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object D1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (VariableManipulator)D1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // s1 ::= VAR IDENTIFICADOR DOSPUNTOS tipoVariable PUNTOYCOMA 
            {
              Object RESULT =null;
		int A1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object A1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object A2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new DefineVariable(A1.toString(),A2.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s10 ::= s10 s1 
            {
              Object RESULT =null;
		int A50left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int A50right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object A50 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int B1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int B1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object B1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((List<Action>)A50).add((Action)B1);RESULT = ((List<Action>)A50);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s10",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // s10 ::= 
            {
              Object RESULT =null;
		
List<Action> acciones = new ArrayList<>(); RESULT = (List<Action>)acciones;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s10",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s0 ::= INICIO s10 FIN 
            {
              Object RESULT =null;
		int O2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int O2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object O2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                if(Action.isDebuggin()){
                  new VariableTable();
                };
Action.doActions((List<Action>)O2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s0 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s0 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

